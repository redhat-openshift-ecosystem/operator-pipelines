---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-to-ocp-registry
spec:
  params:
    - name: cert_project_id
      description: ID of the bundle Certification Project (as in bundle ci.yaml)
    - name: vendor_label
      description: name of the vendor
    - name: repository_name
    - name: image
      description: reference to the existing bundle image
    - name: is_latest
      description: If explicitly set to "true", resulting image will be tagged as "latest"
    - name: bundle_version
      description: Operator bundle version.
    - name: connect_registry
      description: Container registry or proxy from which the published bundle will be pulled
    - name: ocp_registry_kubeconfig_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kubeconfig for service account
        allowing connection with cluster that contains the ocp registries.
    - name: ocp_registry_kubeconfig_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kubeconfig for service
        account allowing connection with cluster that contains the ocp registries.
  results:
    - name: container_digest
    - name: image_pullspec
  volumes:
    - name: kubeconfig-volume
      secret:
        secretName: "$(params.ocp_registry_kubeconfig_secret_name)"
  steps:
    - name: imagestream-manipulations
      image: registry.redhat.io/openshift4/ose-cli@sha256:eed7052f0013b85087cd9fa8e4b328f56a027846107d32a65daeb3a50cf23b49
      volumeMounts:
        - name: kubeconfig-volume
          readOnly: true
          mountPath: "/etc/kubeconfig-volume"
      script: |
        #! /usr/bin/env bash
        set -xe

        # Copying Kubeconfig from secret workspace to grant edit permissions
        cp /etc/kubeconfig-volume/$(params.ocp_registry_kubeconfig_secret_key) $HOME/kubeconfig
        export KUBECONFIG=$HOME/kubeconfig

        # This task authenticates to registry with the credentials associated with service account

        # trim the whitespaces from the params
        PROJECT_NAME=$(echo "$(params.vendor_label)" | xargs echo -n)
        IMAGESTREAM_NAME=$(echo "$(params.repository_name)" | xargs echo -n)
        TAG=$(echo "$(params.bundle_version)" | xargs echo -n)
        IS_LATEST=$(echo "$(params.is_latest)" | xargs echo -n)
        CONNECT_REGISTRY=$(echo "$(params.connect_registry)" | xargs echo -n)

        IMAGE=$(params.image)

        ROLE_NAME=$(echo ${IMAGESTREAM_NAME}-pull)

        ## Create new openshift project OR if it already exists- use existing project
        oc new-project $PROJECT_NAME || oc project $PROJECT_NAME

        ## Get the Imagestream OR if it doesn't exists- (create it AND annotate it)
        oc get imagestream $IMAGESTREAM_NAME || \
        (oc create imagestream $IMAGESTREAM_NAME && \
        oc annotate imagestream $IMAGESTREAM_NAME pid=$(params.cert_project_id))

        ## Get the Role OR if it doesn't exists- create it
        # It is needed, so that registry proxy have access to the imagestream.
        oc get role $ROLE_NAME || \
        oc create role $ROLE_NAME \
            --verb=get \
            --resource=imagestreams,imagestreams/layers \
            --resource-name=$IMAGESTREAM_NAME

        ## (Re)create rolebinding associated with the role

        # (Get rolebinding AND if it exists delete it)
        oc get rolebinding $ROLE_NAME && oc delete rolebinding $ROLE_NAME

        # create rolebinding
        oc create rolebinding $ROLE_NAME --role=$ROLE_NAME \
          --serviceaccount connect:proxysa \
          --serviceaccount connect:rhmp-sa \
          --serviceaccount connect:bpmsa

        ## Create ImagestreamTag
        if ! error=$(oc create imagestreamtag $IMAGESTREAM_NAME:$TAG --from-image $IMAGE) && ! grep -v AlreadyExists <<<"$error"; then
          echo "Unexpected error when creating resources: $error"
        fi

        ## Wait for ImagestreamTag creation
        JSONPATH="{range .status.tags[?(@.tag==\"$TAG\")]}{.tag}{\"\n\"}{end}"
        until [ $(oc get is $IMAGESTREAM_NAME -o jsonpath="$JSONPATH" | grep $TAG | wc -l) == 1 ]; do
          echo "Waiting for the tag creation..."
          sleep 1
        done

        ## Test, whether ImagestreamTag was created properly- OR, if not,
        # (log the error AND exit)
        JSONPATH="{.status.tags[?(@.tag==\"$TAG\")].conditions[].message}"
        oc get imagestreamtag $IMAGESTREAM_NAME:$TAG \
        || (echo "Error while creating ImageStreamTag. Are you sure image $IMAGE is available \
        and secret registry-dockerconfig-secret grants access to it? Error: " \
        && oc get is $IMAGESTREAM_NAME -o jsonpath="$JSONPATH" \
        && exit 1)

        # optionally mark this tag as latest
        if [ "$IS_LATEST" = "true" ]; then
          oc tag $IMAGESTREAM_NAME:$TAG $IMAGESTREAM_NAME:latest
        fi

        ### Results
        ## Get the container digest
        DIGEST=$(oc get imagestreamtag $IMAGESTREAM_NAME:$TAG -o jsonpath='{.image.metadata.name}')
        echo -n $DIGEST > $(results.container_digest.path)
        echo -n "${CONNECT_REGISTRY}/${PROJECT_NAME}/${IMAGESTREAM_NAME}@${DIGEST}" > $(results.image_pullspec.path)
