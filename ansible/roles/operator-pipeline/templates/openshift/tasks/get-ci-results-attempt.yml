---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-ci-results-attempt
spec:
  params:
    - name: pipeline_image
    - name: pyxis_cert_path
      default: ""
      description: Path to Pyxis certificates. Valid only when internal Pyxis is used.
    - name: pyxis_key_path
      default: ""
      description: Path to Pyxis key. Valid only when internal Pyxis is used.
    - name: md5sum
    - name: pyxis_url
    - name: cert_project_id
    - name: bundle_version
    - name: operator_name
  results:
    - name: preflight_results_exists
    - name: preflight_results
      description: |
        Relative file path, from the root of the results workspace,
        where the JSON formatted results are stored.
    - name: test_result_id
  workspaces:
    - name: results
    - name: pyxis-ssl-credentials
      optional: true
  steps:
    - name: get-results
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.results.path)
      env:
        - name: PYXIS_CERT_PATH
          value: $(params.pyxis_cert_path)
        - name: PYXIS_KEY_PATH
          value: $(params.pyxis_key_path)
      script: |
        #! /usr/bin/env bash

        set -xe

        # Send request to Pyxis to get the logs and test results.
        # If they exists, store them in the workspace

        echo "Downloading the artifacts"

        download-test-results \
          --pyxis-url "$(params.pyxis_url)" \
          --cert-project-id "$(params.cert_project_id)" \
          --certification-hash "$(params.md5sum)" \
          --operator-package-version "$(params.bundle_version)" \
          --operator-name "$(params.operator_name)" \
          --verbose

        # ID is passed to "get-ci-results" task.
        # There it is replaced if they are none, or kept if
        # it contain value.
        cat test_result_id | tee $(results.test_result_id.path)

    - name: indicate-if-results-exists
      image: registry.access.redhat.com/ubi8-minimal@sha256:54ef2173bba7384dc7609e8affbae1c36f8a3ec137cacc0866116d65dd4b9afe
      workingDir: $(workspaces.results.path)
      env:
        - name: RESULTS_FILE
          value: test_results.json
      script: |
        #! /usr/bin/env bash

        if [ -f $RESULTS_FILE ]; then
          echo "Results exist"
          echo -n "true" | tee $(results.preflight_results_exists.path)
          echo -n "$RESULTS_FILE" | tee $(results.preflight_results.path)
        else
          echo "Results do not exist"
          echo -n "false" | tee $(results.preflight_results_exists.path)
          echo -n "none" | tee $(results.preflight_results.path)
        fi
