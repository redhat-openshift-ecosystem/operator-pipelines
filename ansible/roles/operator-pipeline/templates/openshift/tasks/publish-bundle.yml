---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-bundle
spec:
  params:
    - name: pipeline_image
    - name: bundle_pullspec
      description: Bundle pullspec
    - name: bundle_versions
      description: All known supported OCP indices
    - name: iib_url
      description: IIB API url
      default: https://iib.engineering.redhat.com
    - name: kerberos_keytab_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
    - name: kerberos_keytab_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
    - name: operator_distribution_method
      description: Operator distribution method. Can be one of [connect, marketplace]
    - name: environment
      description: |
        Which environment the pipeline is running in. Can be one of [dev, qa, stage, prod]
  results:
    - name: docker_references
      description: Comma-separated list of indices
    - name: manifest_digests
      description: Comma-separated list of manifest digests generated by the IIB builds
    - name: status
      description: Indicates a status of publishing a bundle to an index
  volumes:
    - name: kerberos-volume
      secret:
        secretName: "$(params.kerberos_keytab_secret_name)"
  steps:
    - name: publish-bundle
      image: "$(params.pipeline_image)"
      env:
        - name: QUAY_USER
          valueFrom:
            secretKeyRef:
              name: iib-quay-credentials
              key: username
        - name: QUAY_TOKEN
          valueFrom:
            secretKeyRef:
              name: iib-quay-credentials
              key: password
        - name: KRB_KEYTAB_FILE
          value: "/etc/kerberos/$(params.kerberos_keytab_secret_key)"
        - name: DIST_METHOD
          value: "$(params.operator_distribution_method)"
      volumeMounts:
        - name: kerberos-volume
          readOnly: true
          mountPath: "/etc/kerberos"
      script: |
        #! /usr/bin/env bash
        set -xe

        # select the correct index

        case "$(params.environment)" in
            prod)
                case $DIST_METHOD in
                    connect)
                      FROM_INDEX="quay.io/redhat/redhat----certified-operator-index"
                    ;;
                    marketplace)
                      FROM_INDEX="quay.io/redhat/redhat----redhat-marketplace-index"
                    ;;
                    *)
                      echo "Unknown value for operator_distribution_method: $DIST_METHOD"
                      exit 1
                    ;;
                esac
            ;;
            stage)
                case $DIST_METHOD in
                    connect)
                      FROM_INDEX="quay.io/redhat-pending/redhat----certified-operator-index"
                    ;;
                    marketplace)
                      FROM_INDEX="quay.io/redhat-pending/redhat----redhat-marketplace-index"
                    ;;
                    *)
                      echo "Unknown value for operator_distribution_method: $DIST_METHOD"
                      exit 1
                    ;;
                esac
            ;;
            *)
                echo "Publishing bundle to an index is a NOOP for dev and qa environments at this time."
                echo -n "success" | tee "$(results.status.path)"
                # output dummy/test values for signing purposes
                echo -n "registry.redhat.io/redhat/test-operator-index:v4.9" | tee "(results.docker_references.path)"
                echo "$(params.bundle_pullspec)" | awk -F '@' '{print $2}' | tee "(results.manifest_digests.path)"
                exit 0
            ;;
        esac

        INDICES="$(echo $(params.bundle_versions) | tr -d '[,]')"

        # DO NOT use `--verbose` to avoid auth headers appearing in logs
        index \
          --iib-url "$(params.iib_url)" \
          --from-index $FROM_INDEX \
          --indices $INDICES \
          --bundle-pullspec "$(params.bundle_pullspec)"
          --output manifest-digests.txt


        echo -n "success" | tee "$(results.status.path)"
        # comma-separate list for signing input
        REFERENCES="$(echo $(params.bundle_versions) | tr -d '[ ]')"
        echo $REFERENCE | tee "$(results.docker_references.path)"
        cat manifest-digests.txt | tee "$(results.manifest_digests.path)"
