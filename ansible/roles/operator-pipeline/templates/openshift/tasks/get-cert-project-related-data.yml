---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-cert-project-related-data
spec:
  params:
    - name: pipeline_image
    - name: cert_project_id
      description: Identifier of certification project from Red Hat Connect
    - name: pyxis_cert_path
      default: ""
      description: Path to Pyxis certificates. Valid only when internal Pyxis is used.
    - name: pyxis_key_path
      default: ""
    - name: pyxis_url
      default: https://pyxis.engineering.redhat.com
  results:
    - name: new_certification_status
      description: New Certification status of the cert Project
    - name: isv_pid
      description: isv_pid of the certification project from Red Hat Connect
    - name: repo_name
      description: Repository name assigned to certification project from Red Hat Connect
    - name: operator_distribution
      description: Distribution method of the operator - either connect or marketplace
    - name: organization
      description: Organization defined in the project config.yaml - either certified-operator or redhat-marketplace
    - name: org_id
      description: Unique identifier of the organization in Red Hat Connect
    - name: contacts
      description: List of accounts with permissions allowing operator submission
    - name: current_certification_status
      description: Current Certification status of the cert Project
    - name: github_usernames
      description: List of GitHub accounts with permissions allowing operator submission
  workspaces:
    - name: pyxis-ssl-credentials
      optional: true
    - name: source
    - name: results
  steps:
    - name: get-cert-project-related-data
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.source.path)
      env:
        - name: PYXIS_CERT_PATH
          value: $(params.pyxis_cert_path)
        - name: PYXIS_KEY_PATH
          value: $(params.pyxis_key_path)
      script: |
        #! /usr/bin/env bash
        set -xe -o pipefail

        get-cert-project-related-data \
          --pyxis-url $(params.pyxis_url) \
          --cert-project-id $(params.cert_project_id)

        PROJECT_DATA_PATH="$(workspaces.results.path)/cert_project.json"
        cp cert_project $PROJECT_DATA_PATH

        CURRENT_CERTIFICATION_STATUS=$(cat $PROJECT_DATA_PATH | jq -r '.certification_status')
        if [ "$CURRENT_CERTIFICATION_STATUS" != "Published" ]; then
          echo -n "In Progress" | tee $(results.new_certification_status.path)
          echo -n "$CURRENT_CERTIFICATION_STATUS" | tee $(results.current_certification_status.path)
        else
          echo -n "$CURRENT_CERTIFICATION_STATUS" | tee $(results.new_certification_status.path)
          echo -n "$CURRENT_CERTIFICATION_STATUS" | tee $(results.current_certification_status.path)
        fi

        ORGANIZATION=$(cat config.yaml | yq -r '.organization')
        echo -n "$ORGANIZATION" | tee $(results.organization.path)
        OPERATOR_DISTRIBUTION=$(cat cert_project | jq '.operator_distribution'| tr -d '"')
        case "$ORGANIZATION" in
          "certified-operators")
            if [ "$OPERATOR_DISTRIBUTION" != "connect" ]; then
              echo "This project is not permitted to distribute to the $ORGANIZATION catalog."
              exit 1
            fi
            ;;
          "redhat-marketplace")
            if [ "$OPERATOR_DISTRIBUTION" != "marketplace" ]; then
              echo "This project is not permitted to distribute to the $ORGANIZATION catalog."
              exit 1
            fi
            ;;
          *)
            echo "Invalid $ORGANIZATION"
            exit 1
            ;;
        esac

        # `grep .` ensures, that pipe fail if jq returns no results
        cat $PROJECT_DATA_PATH | jq '.container.isv_pid' | tr -d '"' | grep . | tr -d "\n" | tee $(results.isv_pid.path)
        cat $PROJECT_DATA_PATH | jq '.container.repository_name' | tr -d '"' | grep . | tr -d "\n" | tee $(results.repo_name.path)
        cat $PROJECT_DATA_PATH | jq '.org_id' | tr -d '"' |  tr -d '"' | grep . | tr -d "\n" | tee $(results.org_id.path)
        cat $PROJECT_DATA_PATH | jq '.container.github_usernames[]' | tr '\n' ' ' | tr -d '"' | grep . | tr -d "\n" | tee $(results.github_usernames.path)
        cat $PROJECT_DATA_PATH | jq '.operator_distribution' |  tr -d '"' | grep . | tr -d "\n" | tee $(results.operator_distribution.path)
