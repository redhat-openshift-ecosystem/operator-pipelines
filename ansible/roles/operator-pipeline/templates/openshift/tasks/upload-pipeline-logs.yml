---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: upload-pipeline-logs
spec:
  params:
    - name: pipeline_image
    - name: pipelines_cli_tkn_image
      description: Teknton cli image
      default: "registry.redhat.io/openshift-pipelines/pipelines-cli-tkn-rhel8@sha256:d966a46ceac30b702791be4c1278ae316896119521d3007da8a6f2303671d577"
    - name: pyxis_api_key_secret_name
      default: default-api-secret
      description: Kubernetes secret name that contains Pyxis API key. Valid only when external Pyxis is used.
    - name: pyxis_api_key_secret_key
      default: pyxis_api_key
      description: The key within the Kubernetes secret that contains Pyxis API key. Valid only when external Pyxis is used.
    - name: pyxis_ssl_secret_name
      default: default-api-certs
      description: Kubernetes secret name that contains the Pyxis SSL files. Valid only when internal Pyxis is used.
    - name: pyxis_ssl_cert_secret_key
      default: default-ssl-cert
      description: The key within the Kubernetes secret that contains the Pyxis SSL cert. Valid only when internal Pyxis is used.
    - name: pyxis_ssl_key_secret_key
      default: default-ssl-key
      description: The key within the Kubernetes secret that contains the Pyxis SSL key. Valid only when internal Pyxis is used.
    - name: pyxis_url
      default: https://catalog.redhat.com/api/containers/
      description: Red Hat's container API URL
    - name: md5sum
      description: Operator content md5 hash
    - name: cert_project_id
      description: Certification project identifier
    - name: bundle_version
      description: Operator bundle version
    - name: package_name
      description: Operator package name
    - name: pipeline_name
      description: Tekton pipeline name to identify which pipeline the logs are coming from
    - name: pipelinerun_name
      description: Tekton pipeline run name where logs will be gathered from
    - name: git_pr_url
      description: URL to the pull request associated with the pipeline run
      default: ""
  results:
    - name: pipeline_log_url
  workspaces:
    - name: source
  volumes:
    - name: pyxis-ssl-volume
      secret:
        secretName: "$(params.pyxis_ssl_secret_name)"
        optional: true
  steps:
    - name: get-pipeline-logs
      image: "$(params.pipelines_cli_tkn_image)"
      script: |
        #! /usr/bin/env bash
        set -xe

        echo "Getting pipeline logs"

        tkn pipelinerun logs "$(params.pipelinerun_name)" > $(workspaces.source.path)/$(params.pipeline_name).log

    - name: upload-pipeline-logs
      image: "$(params.pipeline_image)"
      env:
        - name: PYXIS_CERT_PATH
          value: /etc/pyxis-ssl-volume/$(params.pyxis_ssl_cert_secret_key)
        - name: PYXIS_KEY_PATH
          value: /etc/pyxis-ssl-volume/$(params.pyxis_ssl_key_secret_key)
        - name: PYXIS_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.pyxis_api_key_secret_name)
              key: $(params.pyxis_api_key_secret_key)
              optional: true
      volumeMounts:
        - name: pyxis-ssl-volume
          readOnly: true
          mountPath: "/etc/pyxis-ssl-volume"
      script: |
        #! /usr/bin/env bash
        echo "Uploading pipeline logs"
        set -ex

        upload-artifacts \
          --cert-project-id "$(params.cert_project_id)" \
          --operator-version "$(params.bundle_version)" \
          --operator-package-name "$(params.package_name)" \
          --certification-hash "$(params.md5sum)" \
          --pull-request-url "$(params.git_pr_url)" \
          --pyxis-url "$(params.pyxis_url)" \
          --path $(workspaces.source.path)/$(params.pipeline_name).log \
          --type pipeline-logs \
          --output pipeline-logs-artifact.json \
          --verbose

        LOG_ID=$(cat pipeline-logs-artifact.json | jq -r "._id")

        LOG_URL="$(params.pyxis_url)v1/projects/certification/artifacts/id/$LOG_ID"

        echo "Pipeline logs URL: "
        echo -n $LOG_URL | tee $(results.pipeline_log_url.path)
