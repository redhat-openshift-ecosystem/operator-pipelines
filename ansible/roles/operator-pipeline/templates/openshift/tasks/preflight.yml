---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: preflight
spec:
  params:
    - name: pipeline_image
    - name: base_image
      default: quay.io/redhat-isv/preflight-test@sha256:685b2e2e3bd0cd2d93db22a84a3be609fc82e16c6670a9ceaf076ac4fa3d19b3
      description: Preflight image used
    - name: package_name
      description: Package name for the Operator under test
    - name: bundle_version
      description: Version of the bundle under test
    - name: bundle_index_image
      description: The Operator index image which includes the bundle
    - name: bundle_image
      description: The Operator bundle image under test
    - name: service_account
      description: The service account for the preflight config
      default: "default"
    - name: namespace
      description: The namespace for the preflight config
      default: "default"
    - name: log_level
      description: Preflight logging level
      default: trace
    - name: cert_project_id
      description: Certification project id
    - name: kubeconfig_secret_name
      description: The name of the Kubernetes Secret that contains the kubeconfig for the cluster used in preflight testing.
    - name: kubeconfig_secret_key
      description: The key within the Kubernetes Secret that contains the kubeconfig for the cluster used in preflight testing.

  results:
    - name: log_output_file
    - name: result_output_file
    - name: artifacts_output_dir
  volumes:
    - name: kubeconfig-volume
      secret:
        secretName: "$(params.kubeconfig_secret_name)"
  workspaces:
    - name: output
      description: Storage for preflight results, logs and artifacts.
    - name: credentials
      description: Docker config for retrieving the bundle image
      optional: true
  steps:
    - name: prepare-docker-config
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.output.path)
      env:
        - name: DOCKERCONFIG
          value: $(workspaces.output.path)/preflight-docker-config.json
      script: |
        #! /usr/bin/env bash
        set -xe

        if [[ "$(workspaces.credentials.bound)" == "true" ]]; then
          # Combine the default credentials with those found in the workspace
          # to maintain access to the internal registry.

          jq -s '.[0] * .[1]' \
            $(workspaces.credentials.path)/.dockerconfigjson \
            $HOME/.docker/config.json \
            > $DOCKERCONFIG
        else
          cp $HOME/.docker/config.json $DOCKERCONFIG
        fi

    - name: check-operator
      image: $(params.base_image)
      workingDir: $(workspaces.output.path)
      env:
        - name: PFLT_INDEXIMAGE
          value: $(params.bundle_index_image)
        - name: PFLT_SERVICEACCOUNT
          value: $(params.service_account)
        - name: PFLT_NAMESPACE
          value: $(params.namespace)
        - name: PFLT_LOGFILE
          value: preflight.log
        - name: PFLT_ARTIFACTS
          value: artifacts
        - name: PFLT_LOGLEVEL
          value: $(params.log_level)
        - name: PFLT_CERTPROJECTID
          value: $(params.cert_project_id)
        - name: PFLT_DOCKERCONFIG
          value: $(workspaces.output.path)/preflight-docker-config.json
        - name: KUBECONFIG
          value: /etc/kubeconfig-volume/$(params.kubeconfig_secret_key)
      volumeMounts:
        - name: kubeconfig-volume
          readOnly: true
          mountPath: "/etc/kubeconfig-volume"
      script: |
        #! /usr/bin/env bash
        set -xe

        preflight check operator $(params.bundle_image)

        mv $PFLT_ARTIFACTS/results.json results.json
        chmod +r results.json
        chmod +r preflight.log
        echo -n $PFLT_LOGFILE | tee $(results.log_output_file.path)
        echo -n results.json | tee $(results.result_output_file.path)
        echo -n $PFLT_ARTIFACTS | tee $(results.artifacts_output_dir.path)

    - name: verify-results
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.output.path)
      script: |
        #! /usr/bin/env bash
        set -ex -o pipefail

        PASSED=$(cat results.json | jq -r '.passed')
        if [ $PASSED = "false" ]; then
          echo "Not all preflight tests passed."
          exit 1
        fi

        echo "All preflight tests passed."
