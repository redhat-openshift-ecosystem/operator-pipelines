---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-pyxis-certification-data
spec:
  params:
    - name: pipeline_image
    - name: cert_project_id
      description: Identifier of certification project from Red Hat Connect
    - name: pyxis_ssl_secret_name
      description: Kubernetes secret name that contains the Pyxis SSL files. Valid only when internal Pyxis is used.
    - name: pyxis_ssl_cert_secret_key
      description: The key within the Kubernetes secret that contains the Pyxis SSL cert. Valid only when internal Pyxis is used.
    - name: pyxis_ssl_key_secret_key
      description: The key within the Kubernetes secret that contains the Pyxis SSL key. Valid only when internal Pyxis is used.
    - name: pyxis_url
      default: https://pyxis.engineering.redhat.com
  results:
    - name: new_certification_status
      description: New Certification status of the cert Project
    - name: isv_pid
      description: isv_pid of the certification project from Red Hat Connect
    - name: repo_name
      description: Repository name assigned to certification project from Red Hat Connect
    - name: operator_distribution
      description: Distribution method of the operator - either connect or marketplace
    - name: org_id
      description: Unique identifier of the organization in Red Hat Connect
    - name: contacts
      description: List of accounts with permissions allowing operator submission
    - name: current_certification_status
      description: Current Certification status of the cert Project
    - name: github_usernames
      description: List of GitHub accounts with permissions allowing operator submission
    - name: project_status
      description: Status of the cert project - either archived or active
    - name: vendor_label
      description: A label of company that owns a certification
  workspaces:
    - name: source
    - name: results
  volumes:
    - name: pyxis-ssl-volume
      secret:
        secretName: "$(params.pyxis_ssl_secret_name)"
        optional: true
  steps:
    - name: get-cert-project-related-data
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.source.path)
      env:
        - name: PYXIS_CERT_PATH
          value: /etc/pyxis-ssl-volume/$(params.pyxis_ssl_cert_secret_key)
        - name: PYXIS_KEY_PATH
          value: /etc/pyxis-ssl-volume/$(params.pyxis_ssl_key_secret_key)
      volumeMounts:
        - name: pyxis-ssl-volume
          readOnly: true
          mountPath: "/etc/pyxis-ssl-volume"
      script: |
        #! /usr/bin/env bash
        set -xe -o pipefail
        if [ "$(params.cert_project_id)" == "" ]; then

          # The project is not present - return a default empty values
          echo -n | tee \
              "$(results.new_certification_status.path)" \
              "$(results.isv_pid.path)" \
              "$(results.repo_name.path)" \
              "$(results.operator_distribution.path)" \
              "$(results.org_id.path)" \
              "$(results.contacts.path)" \
              "$(results.current_certification_status.path)" \
              "$(results.github_usernames.path)" \
              "$(results.project_status.path)"
          exit 0
        fi

        get-cert-project-related-data \
          --pyxis-url $(params.pyxis_url) \
          --cert-project-id $(params.cert_project_id)

        PROJECT_DATA_PATH="$(workspaces.results.path)/cert_project.json"
        cp cert_project $PROJECT_DATA_PATH

        CURRENT_CERTIFICATION_STATUS=$(cat $PROJECT_DATA_PATH | jq -r '.certification_status')
        if [ "$CURRENT_CERTIFICATION_STATUS" != "Published" ]; then
          echo -n "In Progress" | tee $(results.new_certification_status.path)
          echo -n "$CURRENT_CERTIFICATION_STATUS" | tee $(results.current_certification_status.path)
        else
          echo -n "$CURRENT_CERTIFICATION_STATUS" | tee $(results.new_certification_status.path)
          echo -n "$CURRENT_CERTIFICATION_STATUS" | tee $(results.current_certification_status.path)
        fi

        get_from_cp () {
          # Function to get the necessary fields from the CertProject
          FIELD_NAME=$1
          JQ_PATH=$2

          # `grep .` ensures, that pipe fail if jq returns no results
          cat $PROJECT_DATA_PATH | jq -re $JQ_PATH | grep . | tr -d "\n" || \
            { echo " Error while retrieving $FIELD_NAME from the Certification Project- is the value missing?" \
            && exit 1; }
        }

        get_from_cp isv_pid '.container.isv_pid' | tee $(results.isv_pid.path)
        get_from_cp repository_name '.container.repository_name' | tee $(results.repo_name.path)
        get_from_cp operator_distribution '.operator_distribution' | tee $(results.operator_distribution.path)
        get_from_cp project_status '.project_status' | tee $(results.project_status.path)

        get_from_cp org_id '.org_id' | tee org_id.txt "$(results.org_id.path)"

        # Exception, where function cannot be applied-
        # github usernames have the newline symbol changed to space
        echo "Retrieving github_usernames from the Certification Project"
        GITHUB_USERNAMES=$(cat $PROJECT_DATA_PATH | jq -r '.container.github_usernames[]' | tr '\n' ' ' | grep . | tr -d "\n") || \
            { echo " Error while retrieving github_usernames from the Certification Project- is the value missing?" \
            && exit 1; }
        echo -n $GITHUB_USERNAMES | tee $(results.github_usernames.path)

    - name: get-vendor-related-data
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.source.path)
      env:
        - name: PYXIS_CERT_PATH
          value: /etc/pyxis-ssl-volume/$(params.pyxis_ssl_cert_secret_key)
        - name: PYXIS_KEY_PATH
          value: /etc/pyxis-ssl-volume/$(params.pyxis_ssl_key_secret_key)
      volumeMounts:
        - name: pyxis-ssl-volume
          readOnly: true
          mountPath: "/etc/pyxis-ssl-volume"
      script: |
        #! /usr/bin/env bash
        set -xe -o pipefail
        if [ "$(params.cert_project_id)" == "" ]; then
          echo -n "" | tee "$(results.vendor_label.path)"
          exit 0
        fi

        ORG_ID=$(cat org_id.txt)

        get-vendor-related-data \
          --pyxis-url $(params.pyxis_url) \
          --org-id $ORG_ID

        # `xargs echo -n` removes the trailing newline
        cat vendor | jq -r '.label' | xargs echo -n | tee $(results.vendor_label.path)
