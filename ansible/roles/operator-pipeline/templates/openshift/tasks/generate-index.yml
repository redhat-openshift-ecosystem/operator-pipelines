---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: generate-index
spec:
  params:
    - name: pipeline_image
    - name: podman_image
      description: Podman image
      default: "registry.redhat.io/rhel8/podman:8.7"
    - name: bundle_image
      description: Pull spec of a bundle image
    - name: from_index
      description: Parent index image the bundle will be added to
  results:
    - name: index_dockerfile
      description: Path to the generated index Dockerfile
  workspaces:
    - name: output
    - name: credentials
      description: Docker config for retrieving the bundle image
      optional: true
  stepTemplate:
    env:
      - name: DOCKER_CONFIG
        value: "$(workspaces.output.path)/opm-docker-config"
      - name: DB_PATH
        value: /var/lib/iib/_hidden/do.not.edit.db
      - name: FBC_FILE
        value: fbc.txt
  steps:
    - name: prepare
      image: "$(params.podman_image)"
      workingDir: $(workspaces.output.path)
      script: |
        #! /usr/bin/env bash
        chmod 664 podman-inspect.json

        mkdir -p $DOCKER_CONFIG
        chmod 775 $DOCKER_CONFIG
        cp $HOME/.docker/config.json $DOCKER_CONFIG/config.json
        chmod 664 $DOCKER_CONFIG/config.json

    - name: inspect-base-index
      image: "$(params.podman_image)"
      env:
        - name: STORAGE_DRIVER
          value: vfs
      securityContext:
        privileged: true
      workingDir: $(workspaces.output.path)
      script: |
        #! /usr/bin/env bash
        set -exo pipefail

        # Pull the index image from a pre-configured imagestream in the current namespace.
        # It may be possible to eliminate this once sqlite-based index images are no
        # longer supported.

        podman pull $(params.from_index)
        podman image inspect $(params.from_index) | tee -a podman-inspect.json
    - name: determine-index-format
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.output.path)
      script: |
        #! /usr/bin/env bash
        set -x

        # Create a special file in the workspace if this index uses file-based configs
        CONFIGS_QUERY='.[0].Labels."operators.operatorframework.io.index.configs.v1"'
        jq -e "$CONFIGS_QUERY" podman-inspect.json && touch $FBC_FILE
        exit 0

    - name: extract-database
      image: "$(params.from_index)"
      # Ensure OpenShift doesn't use a cached image tag
      imagePullPolicy: Always
      workingDir: $(workspaces.output.path)
      script: |
        #! /usr/bin/env bash
        set -ex

        if [ -f "$FBC_FILE" ]; then
          echo "This index image uses file based configs. Extracting the database."
          cp $DB_PATH index.db
          chmod 664 index.db
        else
          echo "This index image does not use file based configs. Skipping database extraction."
        fi

    - name: generate
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.output.path)
      script: |
        #! /usr/bin/env bash
        set -exo pipefail

        if [[ "$(workspaces.credentials.bound)" == "true" ]]; then
          # Merge the default docker config and the extra creds
          jq -s '.[0] * .[1]' \
            $(workspaces.credentials.path)/.dockerconfigjson \
            $DOCKER_CONFIG/config.json \
            > temp-config.json

          mv temp-config.json $DOCKER_CONFIG/config.json
        fi

        if [ -f "$FBC_FILE" ]; then
          # Add the bundle to the sqlite DB
          opm registry add \
            -b "$(params.bundle_image)" \
            -d index.db

          # Migrate the sqlite DB to a file-based catalog in the "index" directory.
          # The Dockerfile will be named after this directory.
          opm migrate index.db index

          # Generate the index Dockerfile
          opm generate dockerfile index

          # Amend the Dockerfile with the addition of the sqlite DB for backwards compatibility
          echo -e "\nADD index.db $DB_PATH\n" >> index.Dockerfile
        else
          # Pull the index image from a pre-configured imagestream in the current namespace.
          # It may be possible to eliminate this once sqlite-based index images are no
          # longer supported.

          opm index add \
            --from-index "$(params.from_index)" \
            --bundles "$(params.bundle_image)" \
            --container-tool none \
            --out-dockerfile index.Dockerfile \
            --generate
        fi

        ls -lh
        cat index.Dockerfile
        echo -n index.Dockerfile > $(results.index_dockerfile.path)
