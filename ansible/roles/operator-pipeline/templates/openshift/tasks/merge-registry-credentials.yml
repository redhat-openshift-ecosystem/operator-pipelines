---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: merge-registry-credentials
spec:
  params:
    - name: pipeline_image
      description: Image used by the task.
    - name: gpg_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the GPG private key that is used for decryption of user's tokens.
    - name: gpg_key_secret_key
      description: The key within the Kubernetes Secret that contains the gpg key.
    - name: gpg_passphrase_secret_key
      description: The key within the Kubernetes Secret that contains the gpg passphrase.
  workspaces:
    - name: registry-credentials
      description: Registry tokens provided as an input of a pipeline
    - name: registry-credentials-all
      description: Global workspace for storing all registry access tokens
    - name: project-data
      description: Certification project metadata
  volumes:
    - name: gpg-volume
      secret:
        secretName: "$(params.gpg_secret_name)"
  steps:
    - name: get-and-decrypt-project-tokens
      image: "$(params.pipeline_image)"
      workingDir: $(workspaces.registry-credentials-all.path)
      env:
        - name: GPG_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: $(params.gpg_secret_name)
              key: $(params.gpg_passphrase_secret_key)
      volumeMounts:
        - name: gpg-volume
          readOnly: true
          mountPath: "/etc/gpg-volume"
      script: |
        #! /usr/bin/env bash
        # DO NOT USE `set -x`, to avoid revealing the secrets in logs!
        set -e

        export GPG_TTY=$(tty)
        export GNUPGHOME=/tmp


        PROJECT_CONFIG_JSON=`cat "$(workspaces.project-data.path)/cert_project.json" | \
          jq '.container.docker_config_json' | tr -d '"'`

        if [[ $PROJECT_CONFIG_JSON != "null" ]]; then

          echo "Project contains secret registry tokens. Merging with internal tokens..."
          echo $PROJECT_CONFIG_JSON | sed 's/\\n/\n/g' > project_dockerconfigjson.gpg

          gpg -v --batch --import <(cat "/etc/gpg-volume/$(params.gpg_key_secret_key)")

          gpg \
            --output project_dockerconfigjson \
            --batch \
            --yes \
            --passphrase $GPG_PASSPHRASE \
            --pinentry-mode=loopback \
            --decrypt project_dockerconfigjson.gpg

          jq -s '.[0] * .[1]' \
            $(workspaces.registry-credentials.path)/.dockerconfigjson \
            project_dockerconfigjson \
            > "$(workspaces.registry-credentials-all.path)/.dockerconfigjson"
          echo "Tokens successfully merged"
        else
          echo "No partner's registry token has been provided."
          cp "$(workspaces.registry-credentials.path)/.dockerconfigjson" \
             "$(workspaces.registry-credentials-all.path)/.dockerconfigjson"
        fi
