apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: acquire-lease
spec:
  params:
  - name: lease-name
    type: string
  - name: timeout
    type: string
    default: 90m
  stepTemplate:
    env:
      - name: TOTAL_DURATION_IN_SECONDS
        value: ${0}
  steps:
    - name: create-lease
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      script: |
        calculate_duration_in_seconds() {
            if [ "${1: -1}" == "m" ]; then
                TOTAL_DURATION_IN_SECONDS=$((${1:: -1} * 60))
            # If it is "h", then the token is in hours
            elif [ "${1: -1}" == "h" ]; then
                TOTAL_DURATION_IN_SECONDS=$((${1:: -1} * 3600))
            elif [ "${1: -1}" == "s" ]; then
                TOTAL_DURATION_IN_SECONDS=$((${1:: -1}))
            # Otherwise, the token is in seconds
            else
                TOTAL_DURATION_IN_SECONDS=${1}
            fi
        }
        acquire_lease() {
            echo "Attempting to create lease $(params.lease-name)"
            until kubectl create -f e2e-lease.yaml
            do
              echo "Waiting for lease..."
              acquiredTime=$(oc get lease $(params.lease-name) -o=jsonpath='{.spec.acquireTime}')
              acquiredTimeInSeconds=$(date +%s --date="${acquiredTime}")
              currentTimeinSeconds=$(date +%s)
              elapsedSeconds=$(($currentTimeinSeconds-$acquiredTimeInSeconds))
              if (( elapsedSeconds > TOTAL_DURATION_IN_SECONDS)); then
                echo "Lease abandoned, deleting"
                kubectl delete lease $(params.lease-name)
              fi
            done
            leaseOwner=$(kubectl get lease $(params.lease-name) -o=jsonpath='{.spec.holderIdentity}')
            echo "The owner of the lease is ${leaseOwner}"
            echo "Acquired lease $(params.lease-name)"
        }
        create_lease_yaml() {
          microTime=$(date -u +"%Y-%m-%dT%H:%M:%S.000000Z")
          # EOF in yaml is hard, so make a file the simple way
          echo "apiVersion: coordination.k8s.io/v1" > e2e-lease.yaml
          echo "kind: Lease" >> e2e-lease.yaml
          echo "metadata:" >> e2e-lease.yaml
          echo "  name: $(params.lease-name)" >> e2e-lease.yaml
          echo "spec:" >> e2e-lease.yaml
          echo "  acquireTime: ${microTime}" >> e2e-lease.yaml
          echo "  leaseDurationSeconds: ${TOTAL_DURATION_IN_SECONDS}" >> e2e-lease.yaml
          echo "  holderIdentity: $(params.lease-name)" >> e2e-lease.yaml
        }
        # Calculate duration in seconds to store in lease
        calculate_duration_in_seconds $(params.timeout)
        # Create yaml that will be used for the lease object
        create_lease_yaml
        # Acquire Lease
        export -f acquire_lease
        timeout $(params.timeout) bash -c "acquire_lease"