---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: community-release-pipeline
spec:
  params:
    - name: git_repo_url
    - name: git_base_branch
    - name: git_pr_title
    - name: git_pr_url
    - name: git_username
    - name: git_commit
    - name: git_commit_base
    - name: env
    - name: pipeline_image
      default: "quay.io/redhat-isv/operator-pipelines-images:released"
    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token

    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token

    - name: metrics_endpoint
      description: Prometheus metrics endpoint
      default: http://pipeline-metrics.pipeline-metrics-prod

  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
  tasks:

    # Set a initial PR label with indication that pipeline has started
    - name: set-github-started-label
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/started"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: clone-repository
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-github-started-label
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_base_branch)
        - name: depth
          value: 25
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    - name: detect-changes
      taskRef:
        name: parse-repo-changes
        kind: Task
      runAfter:
        - clone-repository
      params:
        - name: pipeline_image
          value: $(params.pipeline_image)
        - name: head_commit
          value: $(params.git_commit)
        - name: base_commit
          value: $(params.git_commit_base)
      workspaces:
        - name: repo
          workspace: repository
          subPath: src

    - name: get-supported-versions
      runAfter:
        - detect-changes
      taskRef:
        name: get-supported-versions
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: &addedBundlePath "operators/$(tasks.detect-changes.results.added_operator)/$(tasks.detect-changes.results.added_bundle)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # acquire/lease the resource to resolve the conflict of concurrent pipelineruns
    - name: acquire-lease
      runAfter:
        - detect-changes
      taskRef:
        name: acquire-lease
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: "community-pipeline"

  finally:
    # Release the acquired resource
    - name: release-lease
      taskRef:
        name: release-lease
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: "community-pipeline"

    - name: set-github-passed-label
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/passed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-failed-label
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/failed"
        - name: remove-matching-namespace-labels
          value: "true"

    # set the GitHub status to success if the pipeline passes
    - name: set-github-status-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Operator bundle has been successfully distributed"
        - name: state
          value: success
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # set the GitHub status to failure if the pipeline does not pass
    - name: set-github-status-failure
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Failed to distribute the operator bundle"
        - name: state
          value: failure
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: upload_pipeline_logs
          value: "true"
      workspaces:
        - name: output
          workspace: results
          subPath: summary

    # Submit a pipeline metrics to a collector
    - name: update-metrics
      taskRef:
        name: update-metrics
      params:
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: metrics_url
          value: "$(params.metrics_endpoint)"
      workspaces:
        - name: output
          workspace: results
          subPath: metrics
