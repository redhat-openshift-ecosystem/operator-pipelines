---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: community-release-pipeline
spec:
  params:
    - name: git_repo_url
    - name: git_base_branch
    - name: git_pr_title
    - name: git_pr_url
    - name: git_username
    - name: git_commit
    - name: git_commit_base
    - name: git_head_sha
    - name: env
    - name: pipeline_image
      default: "quay.io/redhat-isv/operator-pipelines-images:released"

    - name: image_namespace
      default: "$(context.pipelineRun.namespace)"
      description: The namespace/organization all built images will be pushed to.

    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token

    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token

    - name: metrics_endpoint
      description: Prometheus metrics endpoint
      default: http://pipeline-metrics.pipeline-metrics-prod

    - name: umb_ssl_secret_name
      description: Kubernetes secret that contains SSL files
      default: operator-pipeline-api-certs

    - name: umb_ssl_cert_secret_key
      description: Kubernetes secret that contains SSL cert
      default: operator-pipeline.pem

    - name: umb_ssl_key_secret_key
      description: Kubernetes secret that contains SSL key
      default: operator-pipeline.key

    - name: kerberos_keytab_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: kerberos-keytab

    - name: kerberos_keytab_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: krb5-community.keytab

    - name: signing_pub_secret_name
      description: The name of the Kubernetes Secret that contains the public key for verifying signatures.
      default: signing-pub-key

    - name: signing_pub_secret_key
      description: The key within the Kubernetes Secret that contains the public key for verifying signatures.
      default: sig-key.pub

    - name: registry
      description: Must be some variety of quay registry.
      default: quay.io

  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
    - name: registry-credentials
  tasks:

    # Set a initial PR label with indication that pipeline has started
    - name: set-github-started-label
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/started"
        - name: remove-matching-namespace-labels
          value: "true"

    # set environment
    - name: set-env-community
      runAfter:
        - set-github-started-label
      taskRef:
        name: set-env-community
        kind: Task
      params:
        - name: env
          value: $(params.env)

    # Clone the repository contents from the PR branch
    - name: clone-repository
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-env-community
      params:
        - name: url
          value: "$(params.git_repo_url)"
        - name: revision
          value: "$(params.git_commit)"
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    # Clone the repository contents from the base branch
    - name: clone-repository-base
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-env-community
      params:
        - name: url
          value: "$(params.git_repo_url)"
        - name: revision
          value: "$(params.git_commit_base)"
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: base
        - name: ssh-directory
          workspace: ssh-dir

    - name: detect-changes
      taskRef:
        name: parse-repo-changes
        kind: Task
      runAfter:
        - clone-repository
        - clone-repository-base
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: head_commit
          value: "$(params.git_commit)"
        - name: base_commit
          value: "$(params.git_commit_base)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: pr
          workspace: repository
          subPath: src
        - name: base
          workspace: repository
          subPath: base

    - name: read-config
      taskRef:
        name: read-config
        kind: Task
      runAfter:
        - detect-changes
      when: &bundleAdded
        - input: "$(tasks.detect-changes.results.added_bundle)"
          operator: notin
          values: [""]
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: operator_path
          value: "$(tasks.detect-changes.results.operator_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # get supported versions
    - name: get-supported-versions
      runAfter:
        - read-config
      taskRef:
        name: get-supported-versions
      when: *bundleAdded
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # acquire/lease the resource to resolve the conflict of concurrent pipelineruns
    - name: acquire-lease
      runAfter:
        - get-supported-versions
      taskRef:
        name: acquire-lease
      when: *bundleAdded
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: "community-pipeline"

    # call IIB to add the bundle to index
    - name: add-bundle-to-index
      runAfter:
        - acquire-lease
      taskRef:
        name: add-bundle-to-index
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_images
          value: "$(tasks.get-supported-versions.results.indices)"
        - name: bundle_pullspec
          value: "$(params.registry)/$(params.image_namespace)/$(tasks.detect-changes.results.added_operator):$(tasks.detect-changes.results.added_bundle)-$(params.git_head_sha)"
        - name: iib_url
          value: "$(tasks.set-env-community.results.iib_url)"
        - name: environment
          value: "$(params.env)"
        - name: kerberos_keytab_secret_name
          value: "$(params.kerberos_keytab_secret_name)"
        - name: kerberos_keytab_secret_key
          value: "$(params.kerberos_keytab_secret_key)"
        - name: upgrade-graph-mode
          value: "$(tasks.read-config.results.upgrade-graph-mode)"
      workspaces:
        - name: credentials
          workspace: registry-credentials
        - name: results
          workspace: results

    # use manifest list digests from IIB output and get the manifest digests from registry
    - name: get-manifest-digests
      runAfter:
        - add-bundle-to-index
      taskRef:
        name: get-manifest-digests
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_image_paths
          value: "$(tasks.add-bundle-to-index.results.index_image_paths)"
        - name: environment
          value: "$(params.env)"

    # send UMB message to sign the container image
    - name: request-signature
      runAfter:
        - get-manifest-digests
      taskRef:
        name: request-signature
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: manifest_digest
          value: "$(tasks.get-manifest-digests.results.manifest_digests)"
        - name: reference
          value: "$(tasks.get-manifest-digests.results.docker_references)"
        - name: requester
          value: "araszka"
        - name: sig_key_id
          value: "$(tasks.set-env-community.results.sig_key_id)"
        - name: sig_key_name
          value: "$(tasks.set-env-community.results.sig_key_name)"
        - name: umb_client_name
          value: "$(tasks.set-env-community.results.umb_client_name)"
        - name: umb_url
          value: "$(tasks.set-env-community.results.umb_url)"
        - name: umb_ssl_secret_name
          value: "$(params.umb_ssl_secret_name)"
        - name: umb_ssl_cert_secret_key
          value: "$(params.umb_ssl_cert_secret_key)"
        - name: umb_ssl_key_secret_key
          value: "$(params.umb_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: signing

    # upload signature
    - name: upload-signature
      runAfter:
        - request-signature
      taskRef:
        name: upload-signature
        bundle: "quay.io/redhat-isv/tkn-signing-bundle:4692680007"
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: signature_data_file
          value: "$(tasks.request-signature.results.signature_data_file)"
        - name: pyxis_ssl_secret_name
          value: "$(params.umb_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.umb_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.umb_ssl_key_secret_key)"
        - name: pyxis_url
          value: "$(tasks.set-env-community.results.pyxis_url)"
        - name: signing_pub_secret_name
          value: "$(params.signing_pub_secret_name)"
        - name: signing_pub_secret_key
          value: "$(params.signing_pub_secret_key)"
        - name: verify_signature
          value: "true"
      workspaces:
        - name: source
          workspace: repository
          subPath: signing

    - name: publish-to-index
      runAfter:
        - upload-signature
      taskRef:
        name: publish-to-index
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_image_paths
          value: "$(tasks.add-bundle-to-index.results.index_image_paths)"
        - name: environment
          value: "$(params.env)"
        - name: quay_push_final_index_secret
          value: community-push-final-index-quay-credentials
        - name: operator_distribution_method
          value: community

  finally:
    # Release the acquired resource
    - name: release-lease
      taskRef:
        name: release-lease
      when: *bundleAdded
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: "community-pipeline"

    - name: set-github-passed-label
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/passed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-failed-label
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/failed"
        - name: remove-matching-namespace-labels
          value: "true"

    # set the GitHub status to success if the pipeline passes
    - name: set-github-status-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Operator bundle has been successfully distributed"
        - name: state
          value: success
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # set the GitHub status to failure if the pipeline does not pass
    - name: set-github-status-failure
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Failed to distribute the operator bundle"
        - name: state
          value: failure
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: upload_pipeline_logs
          value: "true"
      workspaces:
        - name: output
          workspace: results
          subPath: summary

    # Submit a pipeline metrics to a collector
    - name: update-metrics
      taskRef:
        name: update-metrics
      params:
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: metrics_url
          value: "$(params.metrics_endpoint)"
      workspaces:
        - name: output
          workspace: results
          subPath: metrics
