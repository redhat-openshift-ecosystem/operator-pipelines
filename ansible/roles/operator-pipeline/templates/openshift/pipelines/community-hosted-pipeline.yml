---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: community-hosted-pipeline
spec:
  params:
    - name: git_repo_url
    - name: git_pr_branch
    - name: git_fork_url
    - name: git_pr_url
    - name: git_pr_title
    - name: git_username
    - name: git_commit
    - name: git_commit_base
    - name: env

    - name: registry
      description: Must be some variety of quay registry.
      default: quay.io

    - name: image_namespace
      default: $(context.pipelineRun.namespace)
      description: The namespace/organization all built images will be pushed to.

    - name: pipeline_image
      default: "quay.io/redhat-isv/operator-pipelines-images:released"

    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token

    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token
  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
    - name: registry-credentials
  tasks:

    # Set a initial PR label with indication that pipeline has started
    - name: set-github-started-label
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/started"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: clone-repository
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-github-started-label
      params:
        - name: url
          value: $(params.git_fork_url)
        - name: revision
          value: $(params.git_pr_branch)
        - name: depth
          value: 25
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    - name: detect-changes
      taskRef:
        name: parse-repo-changes
        kind: Task
      runAfter:
        - clone-repository
      params:
        - name: pipeline_image
          value: $(params.pipeline_image)
        - name: head_commit
          value: $(params.git_commit)
        - name: base_commit
          value: $(params.git_commit_base)
      workspaces:
        - name: repo
          workspace: repository
          subPath: src

    - name: dockerfile-creation
      runAfter:
        - detect-changes
      taskRef:
        name: dockerfile-creation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: &addedBundlePath "operators/$(tasks.detect-changes.results.added_operator)/$(tasks.detect-changes.results.added_bundle)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Bundle Image (Operator Bundle) is a container image that stores
    # Kubernetes manifests and metadata associated with an operator.
    # A bundle is meant to represent a specific version of an operator on cluster.
    - name: build-bundle
      runAfter:
        - dockerfile-creation
      taskRef:
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: &bundleImage "$(params.registry)/$(params.image_namespace)/$(tasks.detect-changes.results.added_operator):$(tasks.detect-changes.results.added_bundle)"
        - name: CONTEXT
          value: *addedBundlePath
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: credentials
          workspace: registry-credentials

    - name: get-supported-versions
      runAfter:
        - build-bundle
      taskRef:
        name: get-supported-versions
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: *addedBundlePath
      workspaces:
        - name: source
          workspace: repository
          subPath: src

  finally:

    - name: set-github-passed-label
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/passed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-failed-label
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/failed"
        - name: remove-matching-namespace-labels
          value: "true"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: upload_pipeline_logs
          value: "true"
      workspaces:
        - name: output
          workspace: results
          subPath: summary
