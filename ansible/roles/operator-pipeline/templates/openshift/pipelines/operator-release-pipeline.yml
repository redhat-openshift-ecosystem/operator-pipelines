---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: operator-release-pipeline
spec:
  params:
    - name: git_repo_url
      description: ssh address of GitHub repository
    - name: git_commit
      description: Git repository HEAD commit
    - name: git_commit_base
    - name: git_pr_url
      description: URL to the pull request
    - name: registry
      description: Source registry for the bundle image.
      default: quay.io
    - name: dest_registry
      description: Destination registry for the bundle image.
      default: quay.io
    - name: image_namespace
      description: The namespace/organization where the bundle image from the Hosted pipeline is stored.
      default: $(context.pipelineRun.namespace)
    - name: dest_image_namespace
      description: The namespace/organization where the bundle image will be copied/released.
    - name: env
      description: Which environment to run in. Can be one of [dev, qa, stage, prod, integration-tests]
      default: "prod"
    - name: pipeline_image
      description: An image of operator-pipeline-images.
      default: "quay.io/redhat-isv/operator-pipelines-images:released"
    # Kubernetes secrets related params, usually with default values
    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token
    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token
    - name: pipeline_ssl_secret_name
      description: Kubernetes secret name that contains the Pipeline SSL files.
      default: operator-pipeline-api-certs

    - name: pipeline_ssl_cert_secret_key
      description: The key within the Kubernetes secret that contains the Pipeline SSL cert.
      default: operator-pipeline.pem

    - name: pipeline_ssl_key_secret_key
      description: The key within the Kubernetes secret that contains the Pipeline SSL key.
      default: operator-pipeline.key
    - name: kerberos_keytab_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: kerberos-keytab
    - name: kerberos_keytab_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: krb5-isv.keytab
    - name: signing_pub_secret_name
      description: The name of the Kubernetes Secret that contains the public key for verifying signatures.
      default: signing-pub-key
    - name: signing_pub_secret_key
      description: The key within the Kubernetes Secret that contains the public key for verifying signatures.
      default: sig-key.pub
    - name: cert_project_required
      description: >-
        A flag determines whether a cert project identifier is required
        for the pipeline. The flag distinguish between ISV and community operators.
      default: "true"

    - name: quay_push_final_index_secret
      description: Name of a secret containing a credentials for catalog push to a final destination
      default: iib-quay-credentials

  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
    - name: registry-pull-credentials
    - name: registry-push-credentials
    - name: registry-serve-credentials
    - name: hosted-registry-credentials
    - name: image-data

  tasks:

    # Set a initial PR label with indication that pipeline has started
    - name: set-github-started-label
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/started"
        - name: remove_labels
          value: "pipeline/trigger-release"
        - name: remove-matching-namespace-labels
          value: "true"

    # Set a pending GitHub status check first to provide the user with immeditate feedback.
    - name: set-github-status-pending
      taskRef:
        name: set-github-status
      runAfter:
        - set-github-started-label
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Pipeline for operator distribution has started."
        - name: state
          value: pending
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Set environment
    - name: set-env
      runAfter:
        - set-github-status-pending
      taskRef:
        name: set-env
        kind: Task
      params:
        - name: env
          value: $(params.env)
        - name: access_type
          value: "internal"

    # Git clone
    - name: clone-repository
      runAfter:
        - set-env
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_commit)
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    # Clone the repository contents from the base branch
    - name: clone-repository-base
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-env
      params:
        - name: url
          value: "$(params.git_repo_url)"
        - name: revision
          value: "$(params.git_commit_base)"
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: base
        - name: ssh-directory
          workspace: ssh-dir

    # Parse operator bundle repository changes
    - name: detect-changes
      taskRef:
        name: parse-repo-changes
        kind: Task
      runAfter:
        - clone-repository
        - clone-repository-base
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: head_commit
          value: "$(params.git_commit)"
        - name: base_commit
          value: "$(params.git_commit_base)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: pr
          workspace: repository
          subPath: src
        - name: base
          workspace: repository
          subPath: base
        - name: output
          workspace: results
          subPath: changes

    - name: read-config
      taskRef:
        name: read-config
        kind: Task
      runAfter:
        - detect-changes
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: operator_path
          value: "$(tasks.detect-changes.results.operator_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: output
          workspace: results
          subPath: summary

    - name: resolve-pr-type
      taskRef:
        name: resolve-pr-type
        kind: Task
      runAfter:
        - read-config
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
        - name: affected_catalogs
          value: "$(tasks.detect-changes.results.affected_catalogs)"
        - name: affected_catalog_operators
          value: "$(tasks.detect-changes.results.affected_catalog_operators)"
        - name: fbc-enabled
          value: "$(tasks.read-config.results.fbc-enabled)"

    # Compute a hash of the content so pipeline logs can be uploaded with it
    - name: content-hash
      runAfter:
        - resolve-pr-type
      taskRef:
        name: content-hash
      params:
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
        - name: pipeline_image
          value: "$(params.pipeline_image)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get cert project id
    - name: certification-project-check
      runAfter:
        - content-hash
      taskRef:
        name: certification-project-check
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: operator_path
          value: "$(tasks.detect-changes.results.operator_path)"
        - name: cert_project_required
          value: "$(params.cert_project_required)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: get-organization
      runAfter:
        - certification-project-check
      taskRef:
        name: get-organization
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get additional data necessary for certification
    - name: get-pyxis-certification-data
      runAfter:
        - get-organization
      taskRef:
        name: get-pyxis-certification-data
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pipeline_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pipeline_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pipeline_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: results
          workspace: results

    - name: copy-bundle-image-to-released-registry
      runAfter:
        - get-pyxis-certification-data
      taskRef:
        name: copy-image
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: src_image
          value: "$(params.registry)/$(params.image_namespace)/$(tasks.detect-changes.results.added_operator):$(tasks.detect-changes.results.added_bundle)"
        - name: dest_image_registry_namespace_certproject
          value: "$(params.dest_registry)/$(params.dest_image_namespace)/$(tasks.certification-project-check.results.certification_project_id)"
        - name: dest_image_tag
          value: "$(tasks.detect-changes.results.added_bundle)"
        - name: connect_registry
          value: "$(tasks.set-env.results.connect_registry)"
        - name: vendor_label
          value: "$(tasks.get-pyxis-certification-data.results.vendor_label)"
        - name: repo_name
          value: "$(tasks.get-pyxis-certification-data.results.repo_name)"
      workspaces:
        - name: src-registry-credentials
          workspace: registry-pull-credentials
        - name: dest-registry-credentials
          workspace: registry-push-credentials
        - name: output
          workspace: results
          subPath: summary

    # Publish bundle metadata to Pyxis
    - name: publish-pyxis-data
      runAfter:
        - copy-bundle-image-to-released-registry
      taskRef:
        name: publish-pyxis-data
      when:
        - &bundleAdded
          input: "$(tasks.resolve-pr-type.results.add-bundle)"
          operator: "in"
          values: ["true"]
        - &certProjectExists
          input: "$(tasks.certification-project-check.results.certification_project_id)"
          operator: "notin"
          values: [""]
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: internal_registry
          value: "$(params.registry)"
        - name: internal_repository
          value: "$(params.dest_image_namespace)/$(tasks.certification-project-check.results.certification_project_id)"
        - name: isv_pid
          value: "$(tasks.get-pyxis-certification-data.results.isv_pid)"
        - name: container_digest
          value: "$(tasks.copy-bundle-image-to-released-registry.results.container_digest)"
        - name: bundle_version
          value: "$(tasks.detect-changes.results.added_bundle)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: public_registry
          value: "$(params.dest_registry)"
        - name: public_repository
          value: "$(tasks.get-pyxis-certification-data.results.vendor_label)/$(tasks.get-pyxis-certification-data.results.repo_name)"
        - name: docker_config_file_name
          value: ".dockerconfigjson"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pipeline_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pipeline_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pipeline_ssl_key_secret_key)"
      workspaces:
        - name: image-data
          workspace: image-data
        - name: registry-credentials
          workspace: registry-serve-credentials

    # Get the bundle versions to build index
    - name: get-supported-versions
      runAfter:
        - publish-pyxis-data
      taskRef:
        name: get-supported-versions
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: build-fragment-images
      taskRef:
        name: build-fragment-images
        kind: Task
      runAfter:
        - get-supported-versions
      when:
        - &catalogUpdated
          input: "$(tasks.resolve-pr-type.results.update-catalog)"
          operator: in
          values: ["true"]
        - &isFBC
          input: "$(tasks.read-config.results.fbc-enabled)"
          operator: in
          values:
            - "true"
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: commit_sha
          value: $(params.git_commit)
        - name: affected_catalogs
          value: "$(tasks.detect-changes.results.catalogs_with_added_or_modified_operators)"
        - name: fragment_repository
          value: "$(params.registry)/$(params.image_namespace)/catalog"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: credentials
          workspace: hosted-registry-credentials

    # acquire/lease the resource to resolve the conflict of concurrent pipelineruns
    - name: acquire-lease
      retries: 8
      runAfter:
        - build-fragment-images
      when:
        - &notUndistributed
          input: "$(tasks.get-pyxis-certification-data.results.operator_distribution)"
          operator: notin
          values:
            - undistributed
      taskRef:
        name: acquire-lease
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: "$(tasks.get-organization.results.organization)"
        - name: lease-owner
          value: "$(context.pipelineRun.name)"

    - name: build-fbc-index-images
      runAfter:
        - acquire-lease
      when:
        - *catalogUpdated
        - *notUndistributed
        - *isFBC
      taskRef:
        name: build-fbc-index-images
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_images
          value: "$(tasks.get-supported-versions.results.indices)"
        - name: commit_sha
          value: "$(params.git_commit)"
        - name: catalogs_with_added_or_modified_operators
          value: "$(tasks.detect-changes.results.catalogs_with_added_or_modified_operators)"
        - name: deleted_catalog_operators
          value: "$(tasks.detect-changes.results.deleted_catalog_operators)"
        - name: image_repository
          value: "$(params.registry)/$(params.image_namespace)/catalog"
        - name: iib_url
          value: "$(tasks.set-env.results.iib_url)"
        - name: environment
          value: "$(params.env)"
        - name: kerberos_keytab_secret_name
          value: "$(params.kerberos_keytab_secret_name)"
        - name: kerberos_keytab_secret_key
          value: "$(params.kerberos_keytab_secret_key)"
      workspaces:
        - name: output
          workspace: results
          subPath: paths

    # call IIB to add the bundle to index
    - name: add-bundle-to-index
      runAfter:
        - build-fbc-index-images
      when:
        - *catalogUpdated
        - *notUndistributed
        - &isNotFBC
          input: "$(tasks.read-config.results.fbc-enabled)"
          operator: notin
          values:
            - "true"
      taskRef:
        name: add-bundle-to-index
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_images
          value: "$(tasks.get-supported-versions.results.indices)"
        - name: bundle_pullspec
          value: "$(tasks.copy-bundle-image-to-released-registry.results.image_pullspec)"
        - name: iib_url
          value: "$(tasks.set-env.results.iib_url)"
        - name: environment
          value: "$(params.env)"
        - name: kerberos_keytab_secret_name
          value: "$(params.kerberos_keytab_secret_name)"
        - name: kerberos_keytab_secret_key
          value: "$(params.kerberos_keytab_secret_key)"
        - name: upgrade-graph-mode
          value: "$(tasks.read-config.results.upgrade-graph-mode)"
      workspaces:
        - name: output
          workspace: results
          subPath: paths

    - name: decide-index-paths
      runAfter:
        - add-bundle-to-index
      when:
        - *catalogUpdated
        - *notUndistributed
      taskRef:
        name: decide-index-paths
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
      workspaces:
        - name: input
          workspace: results
          subPath: paths

    # use manifest list digests from IIB output and get the manifest digests from registry
    - name: get-manifest-digests
      runAfter:
        - decide-index-paths
      when:
        - *catalogUpdated
        - *notUndistributed
      taskRef:
        name: get-manifest-digests
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_image_paths
          value: "$(tasks.decide-index-paths.results.index_image_paths)"
        - name: environment
          value: "$(params.env)"

    # send UMB message for RADAS to sign the container image
    - name: request-signature
      runAfter:
        - get-manifest-digests
      when:
        - *catalogUpdated
        - *notUndistributed
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: "quay.io/redhat-isv/tkn-signing-bundle:4692680007"
          - name: name
            value: request-signature
          - name: kind
            value: Task
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: manifest_digest
          value: "$(tasks.get-manifest-digests.results.manifest_digests)"
        - name: reference
          value: "$(tasks.get-manifest-digests.results.docker_references)"
        - name: requester
          value: "araszka"
        - name: sig_key_id
          value: "$(tasks.set-env.results.sig_key_id)"
        - name: sig_key_name
          value: "$(tasks.set-env.results.sig_key_name)"
        - name: umb_ssl_secret_name
          value: "$(params.pipeline_ssl_secret_name)"
        - name: umb_ssl_cert_secret_key
          value: "$(params.pipeline_ssl_cert_secret_key)"
        - name: umb_ssl_key_secret_key
          value: "$(params.pipeline_ssl_key_secret_key)"
        - name: umb_client_name
          value: "$(tasks.set-env.results.umb_client_name)"
        - name: umb_url
          value: "$(tasks.set-env.results.umb_url)"
      workspaces:
        - name: source
          workspace: repository
          subPath: signing

    - name: upload-signature
      runAfter:
        - request-signature
      when:
        - *catalogUpdated
        - *notUndistributed
      taskRef:
        resolver: bundles
        params:
          - name: bundle
            value: "quay.io/redhat-isv/tkn-signing-bundle:4692680007"
          - name: name
            value: upload-signature
          - name: kind
            value: Task
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: signature_data_file
          value: "$(tasks.request-signature.results.signature_data_file)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pipeline_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pipeline_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pipeline_ssl_key_secret_key)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: signing_pub_secret_name
          value: "$(params.signing_pub_secret_name)"
        - name: signing_pub_secret_key
          value: "$(params.signing_pub_secret_key)"
        - name: verify_signature
          value: "true"
      workspaces:
        - name: source
          workspace: repository
          subPath: signing

    - name: publish-to-index
      runAfter:
        - upload-signature
      when:
        - *catalogUpdated
        - *notUndistributed
      taskRef:
        name: publish-to-index
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_image_paths
          value: "$(tasks.decide-index-paths.results.index_image_paths)"
        - name: environment
          value: "$(params.env)"
        - name: organization
          value: "$(tasks.get-organization.results.organization)"
        - name: quay_push_final_index_secret
          value: "$(params.quay_push_final_index_secret)"
      workspaces:
        - name: output
          workspace: results
          subPath: summary


  finally:

    # Release the acquired resource
    - name: release-leases
      taskRef:
        name: release-leases
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-owner
          value: "$(context.pipelineRun.name)"

    # Upload the logs of this pipeline.
    # Dependencies on other task results should be minimized. If any
    # of those tasks fail, it'll prevent this task from executing.
    - name: upload-pipeline-logs
      taskRef:
        name: upload-pipeline-logs
      when:
        - *certProjectExists
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.detect-changes.results.added_bundle)"
        - name: git_pr_url
          value: $(params.git_pr_url)
        - name: package_name
          value: "$(tasks.detect-changes.results.added_operator)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pipeline_name
          value: "$(context.pipeline.name)"
        - name: pipelinerun_name
          value: "$(context.pipelineRun.name)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pipeline_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pipeline_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pipeline_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository

    # In the event of a pipeline failure, this task will post a comment
    # with the support link pointing to the affected PR
    - name: post-support-link-for-pr
      when:
        - input: "$(tasks.certification-project-check.results.certification_project_id)"
          operator: "notin"
          values: [""]
        - input: $(tasks.status)
          operator: notin
          values: ["Succeeded", "Completed"]
      taskRef:
        name: create-support-link-for-pr
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: connect_url
          value: $(tasks.set-env.results.connect_url)
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pull_request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: output
          workspace: results
          subPath: summary

    - name: set-github-passed-label
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/passed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-failed-label
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/failed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-status-success
      taskRef:
        name: set-github-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Operator bundle has been successfully distributed."
        - name: state
          value: success
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Set the github status to failure if the pipeline didn't pass.
    - name: set-github-status-failure
      taskRef:
        name: set-github-status
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Failed to distribute the operator bundle."
        - name: state
          value: failure
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: upload_pipeline_logs
          value: "true"
        - name: pipeline_name
          value: "$(context.pipeline.name)"
        - name: pipeline_status
          value: "$(tasks.status)"
      workspaces:
        - name: base
          workspace: repository
          subPath: base
        - name: output
          workspace: results
          subPath: summary
