---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator-release-pipeline
spec:
  params:
    - name: git_repo_url
      description: ssh address of GitHub repository
    - name: git_base_branch
      description: Name of the base branch in the pull request. e.g. "main"
      default: "main"
    - name: git_commit
      description: Git repository HEAD commit
    - name: git_pr_title
      description: title of the pull request with operator submission
    - name: git_pr_url
      description: URL to the pull request
    - name: is_latest
      description: If explicitly set to "true", resulting image will be tagged as "latest"
    - name: registry
      description: temporary registry used by Hosted pipeline to pass the image to Release pipeline.
      default: quay.io
    - name: image_namespace
      description: The namespace/organization where images from Hosted pipeline are stored.
      default: $(context.pipelineRun.namespace)
    - name: env
      description: Which environment to run in. Can be one of [dev, qa, stage, prod]
      default: "prod"
    - name: pipeline_image
      description: An image of operator-pipeline-images.
      default: "quay.io/redhat-isv/operator-pipelines-images:released"
    # Kubernetes secrets related params, usually with default values
    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token
    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token
    - name: ibm_webhook_token_secret_name
      description: The name of the Kubernetes Secret that contains the IBM webhook token.
      default: ibm-webhook-token
    - name: ibm_webhook_token_secret_key
      description: The key within the Kubernetes Secret that contains the IBM webhook token.
      default: token
    - name: pyxis_ssl_secret_name
      description: Kubernetes secret name that contains the Pyxis SSL files.
      default: operator-pipeline-api-certs
    - name: pyxis_ssl_cert_secret_key
      description: The key within the Kubernetes secret that contains the Pyxis SSL cert.
      default: operator-pipeline.pem
    - name: pyxis_ssl_key_secret_key
      description: The key within the Kubernetes secret that contains the Pyxis SSL key.
      default: operator-pipeline.key
    - name: ocp_registry_kubeconfig_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kubeconfig for service account
        allowing connection with cluster that contains the ocp registries.
      default: ocp-registry-kubeconfig
    - name: ocp_registry_kubeconfig_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kubeconfig for service
        account allowing connection with cluster that contains the ocp registries.
      default: kubeconfig
    - name: kerberos_keytab_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: kerberos-keytab
    - name: kerberos_keytab_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: krb5.keytab
  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
    - name: registry-credentials
    - name: image-data

  tasks:
    # Set a pending GitHub status check first to provide the user with immeditate feedback.
    - name: set-github-status-pending
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Publishing the Operator bundle."
        - name: state
          value: pending
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Set environment
    - name: set-env
      runAfter:
        - set-github-status-pending
      taskRef:
        name: set-env
        kind: Task
      params:
        - name: env
          value: $(params.env)
        - name: access_type
          value: "internal"

    # Git clone
    - name: checkout
      runAfter:
        - set-env
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_base_branch)
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    # Get the bundle path
    - name: get-bundle-path
      runAfter:
        - checkout
      taskRef:
        name: get-bundle-path
      params:
        - name: git_pr_title
          value: $(params.git_pr_title)

    # Verify the bundle path exists
    - name: bundle-path-validation
      runAfter:
        - get-bundle-path
      taskRef:
        name: bundle-path-validation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Compute a hash of the content so pipeline logs can be uploaded with it
    - name: content-hash
      runAfter:
        - bundle-path-validation
      taskRef:
        name: content-hash
      params:
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
        - name: pipeline_image
          value: "$(params.pipeline_image)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get cert project id
    - name: certification-project-check
      runAfter:
        - bundle-path-validation
      taskRef:
        name: certification-project-check
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: create-support-link-for-pr
      runAfter:
        - certification-project-check
      taskRef:
        name: create-support-link-for-pr
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: connect_url
          value: $(tasks.set-env.results.connect_url)
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pull_request_url
          value: "$(params.git_pr_url)"

    - name: get-organization
      runAfter:
        - certification-project-check
      taskRef:
        name: get-organization
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get the bundle versions to build index
    - name: get-supported-versions
      runAfter:
        - bundle-path-validation
      taskRef:
        name: get-supported-versions
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get additional data necessary for certification
    - name: get-cert-project-related-data
      runAfter:
        - get-organization
      taskRef:
        name: get-cert-project-related-data
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: results
          workspace: results

    - name: get-vendor-related-data
      runAfter:
        - get-cert-project-related-data
      taskRef:
        name: get-vendor-related-data
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: org_id
          value: "$(tasks.get-cert-project-related-data.results.org_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"

    - name: inspect-image
      runAfter:
        - bundle-path-validation
      taskRef:
        name: inspect-image
        kind: Task
      params:
        - name: image
          value: &bundleImage "$(params.registry)/$(params.image_namespace)/$(tasks.bundle-path-validation.results.package_name):$(tasks.bundle-path-validation.results.bundle_version)"
        - name: registry
          value: $(params.registry)
      workspaces:
        - name: registry-credentials
          workspace: registry-credentials
        - name: image-data
          workspace: image-data

    # Publish image to OCP registry
    - name: publish-to-ocp-registry
      runAfter:
        - get-vendor-related-data
      taskRef:
        name: publish-to-ocp-registry
      params:
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: vendor_label
          value: "$(tasks.get-vendor-related-data.results.vendor_label)"
        - name: repository_name
          value: "$(tasks.get-cert-project-related-data.results.repo_name)"
        - name: image
          value: *bundleImage
        - name: is_latest
          value: "$(params.is_latest)"
        - name: bundle_version
          value: "$(tasks.bundle-path-validation.results.bundle_version)"
        - name: connect_registry
          value: "$(tasks.set-env.results.connect_registry)"
        - name: ocp_registry_kubeconfig_secret_name
          value: "$(params.ocp_registry_kubeconfig_secret_name)"
        - name: ocp_registry_kubeconfig_secret_key
          value: "$(params.ocp_registry_kubeconfig_secret_key)"

    # Trigger IBM webhook for marketplace replication
    - name: trigger-marketplace-replication
      runAfter:
        - publish-to-ocp-registry
        - get-supported-versions
        - bundle-path-validation
      taskRef:
        name: trigger-marketplace-replication
      params:
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
        - name: ibm_webhook_token_secret_name
          value: "$(params.ibm_webhook_token_secret_name)"
        - name: ibm_webhook_token_secret_key
          value: "$(params.ibm_webhook_token_secret_key)"
        - name: package
          value: "$(tasks.bundle-path-validation.results.package_name)"
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: ocp_version
          value: "$(tasks.get-supported-versions.results.ocp_version)"
        - name: organization
          value: "$(tasks.get-organization.results.organization)"
        - name: version
          value: "$(tasks.bundle-path-validation.results.bundle_version)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # create container image
    - name: create-container-image
      runAfter:
        - publish-to-ocp-registry
        - inspect-image
      taskRef:
        name: create-container-image
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: environment
          value: "$(params.env)"
        - name: isv_pid
          value: "$(tasks.get-cert-project-related-data.results.isv_pid)"
        - name: repository
          value: "$(tasks.get-vendor-related-data.results.vendor_label)/$(tasks.get-cert-project-related-data.results.repo_name)"
        - name: container_digest
          value: "$(tasks.publish-to-ocp-registry.results.container_digest)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
        - name: bundle_version
          value: "$(tasks.bundle-path-validation.results.bundle_version)"
        - name: is_latest
          value: "$(params.is_latest)"
      workspaces:
        - name: image-data
          workspace: image-data

    # call IIB to publish the bundle
    - name: publish-bundle
      runAfter:
        - create-container-image
        - trigger-marketplace-replication
      taskRef:
        name: publish-bundle
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_versions
          value: "$(tasks.get-supported-versions.results.indices)"
        - name: bundle_pullspec
          value: "$(tasks.publish-to-ocp-registry.results.image_pullspec)"
        - name: operator_distribution_method
          value: "$(tasks.get-cert-project-related-data.results.operator_distribution)"
        - name: iib_url
          value: "$(tasks.set-env.results.iib_url)"
        - name: environment
          value: "$(params.env)"
        - name: kerberos_keytab_secret_name
          value: "$(params.kerberos_keytab_secret_name)"
        - name: kerberos_keytab_secret_key
          value: "$(params.kerberos_keytab_secret_key)"

    # Publish Vendor, Repository
    - name: publish-resources
      runAfter:
        - publish-bundle
      taskRef:
        name: publish-resources
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: org_id
          value: "$(tasks.get-cert-project-related-data.results.org_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
        - name: environment
          value: "$(params.env)"

  finally:

    # Upload the logs of this pipeline.
    # Dependencies on other task results should be minimized. If any
    # of those tasks fail, it'll prevent this task from executing.
    - name: upload-pipeline-logs
      taskRef:
        name: upload-pipeline-logs
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.bundle-path-validation.results.bundle_version)"
        - name: package_name
          value: "$(tasks.bundle-path-validation.results.package_name)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pipeline_name
          value: "$(context.pipelineRun.name)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository

    # In the event of a failure, comment with the support link on the github PR
    - name: github-add-support-comment
      when:
        - input: $(tasks.status)
          operator: notin
          values: ["Succeeded", "Completed"]
      taskRef:
        name: github-add-comment
      params:
        - name: REQUEST_URL
          value: "$(params.git_pr_url)"
        - name: COMMENT_OR_FILE
          value: "There were errors while publishing your Operator bundle. You can use [this support case]($(tasks.create-support-link-for-pr.results.comment)) to contact the Red Hat certification team for review."
        - name: GITHUB_TOKEN_SECRET_NAME
          value: "$(params.github_token_secret_name)"
        - name: GITHUB_TOKEN_SECRET_KEY
          value: "$(params.github_token_secret_key)"

    # Updates certification status to "Published"
    - name: update-cert-project-status
      taskRef:
        name: update-cert-project-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
          # The project is always published if this is executing
        - name: new_certification_status
          value: "Published"
        - name: current_certification_status
          value: "$(tasks.get-cert-project-related-data.results.current_certification_status)"

    - name: set-github-status-success
      taskRef:
        name: set-github-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Successfully published the Operator bundle."
        - name: state
          value: success
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Set the github status to failure if the pipeline didn't pass.
    - name: set-github-status-failure
      taskRef:
        name: set-github-status
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Failed to publish the Operator bundle."
        - name: state
          value: failure
        - name: context
          value: "operator/publish"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
      workspaces:
        - name: output
          workspace: results
          subPath: summary
