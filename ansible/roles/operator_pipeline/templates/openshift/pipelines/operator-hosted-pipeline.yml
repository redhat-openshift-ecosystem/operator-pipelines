---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator-hosted-pipeline
spec:
  params:
    # When adding a new param, make sure to also add it to the webhook in
    # operator-hosted-pipeline-trigger.yml if possible
    - name: git_pr_branch

    - name: git_pr_title

    - name: git_pr_url

    - name: git_fork_url

    - name: git_repo_url

    - name: git_username

    - name: git_commit

    - name: git_base_branch
      description: Name of the base branch. e.g. "main"

    - name: pr_head_label

    - name: env
      description: Which environment to run in. Can be one of [dev, qa, stage, prod]
      default: "prod"

    - name: preflight_min_version

    - name: preflight_trigger_environment
      description: Which openshift-ci step-registry steps and ProwJob templates to use. Can be one of [preprod, prod]
      default: "prod"

    - name: ci_min_version

    - name: registry
      description: Must be some variety of quay registry.
      default: quay.io

    - name: image_namespace
      default: $(context.pipelineRun.namespace)
      description: The namespace/organization all built images will be pushed to.

    - name: ignore_publishing_checklist
      default: "false"
      description: Ignore the results of the publishing checklist

    - name: pipeline_image
      description: An image of operator-pipeline-images.
      default: "quay.io/redhat-isv/operator-pipelines-images:released"
      # Kubernetes secrets related params, usually with default values

    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token

    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token

    - name: quay_oauth_secret_name
      default: quay-oauth-token

    - name: quay_oauth_secret_key
      default: token

    - name: hydra_secret_name
      description: Kubernetes secret name that contains the Hydra credentials.
      default: hydra-credentials

    - name: hydra_secret_sso_client_id_key
      description: |
        The key within the Kubernetes secret that contains Hydra SSO client ID.
      default: sso_client_id

    - name: hydra_secret_sso_client_secret_key
      description: |
        The key within the Kubernetes secret that contains the Hydra SSO password.
      default: sso_client_secret

    - name: hydra_sso_token_url
      description: SSO URL.
      default: https://auth.redhat.com/auth/realms/EmployeeIDP/protocol/openid-connect/token

    - name: pyxis_ssl_secret_name
      description: Kubernetes secret name that contains the Pyxis SSL files.
      default: operator-pipeline-api-certs

    - name: pyxis_ssl_cert_secret_key
      description: The key within the Kubernetes secret that contains the Pyxis SSL cert.
      default: operator-pipeline.pem

    - name: pyxis_ssl_key_secret_key
      description: The key within the Kubernetes secret that contains the Pyxis SSL key.
      default: operator-pipeline.key

    - name: kerberos_keytab_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: kerberos-keytab

    - name: kerberos_keytab_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: krb5-isv-pending.keytab

    - name: prow_kubeconfig_secret_name
      description: The name of the Kubernetes Secret that contains the prow kubeconfig for preflight tests.
      default: prow-kubeconfig

    - name: prow_kubeconfig_secret_key
      description: The key within the Kubernetes Secret that contains the prow kubeconfig for preflight tests.
      default: kubeconfig

    - name: preflight_decryption_key_secret_name
      description: The name of the Kubernetes Secret that contains the gpg decryption key.
      default: preflight-decryption-key

    - name: preflight_decryption_private_key_secret_key
      description: The key within the Kubernetes Secret that contains the gpg private key.
      default: private

    - name: preflight_decryption_public_key_secret_key
      description: The key within the Kubernetes Secret that contains the gpg public key.
      default: public

    - name: gpg_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the GPG private key that is used for decryption of user's tokens.
      default: isv-gpg-key

    - name: gpg_key_secret_key
      description: The key within the Kubernetes Secret that contains the gpg key.
      default: operator-pipeline-gpg.key

    - name: gpg_passphrase_secret_key
      description: The key within the Kubernetes Secret that contains the gpg passphrase.
      default: operator-pipeline-gpg.passphrase

    - name: metrics_endpoint
      description: Prometheus metrics endpoint
      default: http://pipeline-metrics.pipeline-metrics-prod
  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
    - name: registry-credentials
    - name: registry-credentials-all
      description: Storage space for the result of merging certification project and
        pipeline service account registry tokens.
  tasks:

    # Set a initial PR label with indication that pipeline has started
    - name: set-github-started-label
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/started"
        - name: remove-matching-namespace-labels
          value: "true"

    # Set a pending GitHub status check first to provide the user with immediate feedback.
    - name: set-github-status-pending
      taskRef:
        name: set-github-status
      runAfter:
        - set-github-started-label
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Certifying the Operator bundle."
        - name: state
          value: pending
        - name: context
          value: "operator/test"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Set environment
    - name: set-env
      runAfter:
        - set-github-status-pending
      taskRef:
        name: set-env
        kind: Task
      params:
        - name: env
          value: $(params.env)
        - name: access_type
          value: "internal"

    # Git clone
    - name: checkout
      runAfter:
        - set-env
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.git_fork_url)
        - name: revision
          value: $(params.git_pr_branch)
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    # Verify PR title
    - name: validate-pr-title
      runAfter:
        - checkout
      taskRef:
        name: validate-pr-title
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_pr_title
          value: $(params.git_pr_title)

    # Get the bundle path
    - name: get-bundle-path
      runAfter:
        - validate-pr-title
      taskRef:
        name: get-bundle-path
      params:
        - name: git_pr_title
          value: $(params.git_pr_title)

    # Verify the bundle path exists
    - name: bundle-path-validation
      runAfter:
        - get-bundle-path
      taskRef:
        name: bundle-path-validation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get cert project id
    - name: certification-project-check
      runAfter:
        - bundle-path-validation
      taskRef:
        name: certification-project-check
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: create-support-link-for-pr
      runAfter:
        - certification-project-check
      taskRef:
        name: create-support-link-for-pr
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: connect_url
          value: $(tasks.set-env.results.connect_url)
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pull_request_url
          value: "$(params.git_pr_url)"

    - name: get-organization
      runAfter:
        - certification-project-check
      taskRef:
        name: get-organization
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Get cert project related data
    - name: get-cert-project-related-data
      runAfter:
        - certification-project-check
      taskRef:
        name: get-cert-project-related-data
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: results
          workspace: results

    - name: verify-project
      runAfter:
        - get-cert-project-related-data
      taskRef:
        name: verify-project
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: project_distribution
          value: "$(tasks.get-cert-project-related-data.results.operator_distribution)"
        - name: organization
          value: "$(tasks.get-organization.results.organization)"
        - name: project_status
          value: "$(tasks.get-cert-project-related-data.results.project_status)"

    # Merge user's registry tokens with service account credentials
    # used elsewhere by this pipeline.
    #
    # NOTE: The project credentials will always "win" if there is a
    # matching registry entry in the registry-credentials workspace.
    # For example, if the partner provides credentials to quay.io,
    # our credentials for that registry will be omitted.
    - name: merge-registry-credentials
      runAfter:
        - get-cert-project-related-data
      taskRef:
        name: merge-registry-credentials
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: gpg_secret_name
          value: "$(params.gpg_secret_name)"
        - name: gpg_key_secret_key
          value: "$(params.gpg_key_secret_key)"
        - name: gpg_passphrase_secret_key
          value: "$(params.gpg_passphrase_secret_key)"
      workspaces:
        - name: registry-credentials-all
          workspace: registry-credentials-all
        - name: registry-credentials
          workspace: registry-credentials
        - name: project-data
          workspace: results

    # Validate submission
    - name: submission-validation
      runAfter:
        - get-cert-project-related-data
      taskRef:
        name: submission-validation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_pr_url
          value: $(params.git_pr_url)
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: pyxis_url
          value: $(tasks.set-env.results.pyxis_url)
        - name: git_username
          value: $(params.git_username)
        - name: github_usernames
          value: "$(tasks.get-cert-project-related-data.results.github_usernames)"
        - name: operator_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Updates certification status to "In Progress", if not already "Published".
    # See the get-cert-project-related-data task for how that's determined.
    - name: update-cert-project-status
      runAfter:
        - submission-validation
      taskRef:
        name: update-cert-project-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: new_certification_status
          value: "$(tasks.get-cert-project-related-data.results.new_certification_status)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
        - name: current_certification_status
          value: "$(tasks.get-cert-project-related-data.results.current_certification_status)"

    # reserve operator name
    - name: reserve-operator-name
      runAfter:
        - update-cert-project-status
        - annotations-validation
      taskRef:
        name: reserve-operator-name
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: association
          value: "$(tasks.get-cert-project-related-data.results.isv_pid)"
        - name: operator_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
        - name: source
          value: "$(tasks.get-organization.results.organization)"

    - name: annotations-validation
      runAfter:
        - get-organization
      taskRef:
        name: annotations-validation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
        - name: package_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: organization
          value: "$(tasks.get-organization.results.organization)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: get-supported-versions
      runAfter:
        - reserve-operator-name
      taskRef:
        name: get-supported-versions
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: yaml-lint
      runAfter:
        - reserve-operator-name
      taskRef:
        name: yaml-lint
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: args
          value: ["-d {extends: default, rules: {line-length: {max: 180, level: warning}, indentation: {indent-sequences: whatever}}}", "$(tasks.get-bundle-path.results.bundle_path)"]
      workspaces:
        - name: shared-workspace
          workspace: repository
          subPath: src

    - name: digest-pinning
      runAfter:
        - reserve-operator-name
        - merge-registry-credentials
      taskRef:
        name: digest-pinning
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: registry-credentials
          workspace: registry-credentials-all

    - name: verify-pinned-digest
      runAfter:
        - digest-pinning
      taskRef:
        name: verify-pinned-digest
      params:
        - name: dirty_flag
          value: "$(tasks.digest-pinning.results.dirty_flag)"
        - name: related_images_flag
          value: "$(tasks.digest-pinning.results.related_images_flag)"

    - name: content-hash
      runAfter:
        - bundle-path-validation
      taskRef:
        name: content-hash
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: verify-changed-directories
      runAfter:
        - reserve-operator-name
      taskRef:
        name: verify-changed-directories
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: operator_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: bundle_version
          value: "$(tasks.validate-pr-title.results.bundle_version)"
        - name: pr_head_label
          value: $(params.pr_head_label)
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: base_branch
          value: $(params.git_base_branch)
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Build images- bundle and index and push them to registry.
    # Those steps are also a part of the CI pipeline.
    - name: dockerfile-creation
      runAfter:
        - annotations-validation
        - get-supported-versions
        - yaml-lint
        - verify-pinned-digest
        - verify-changed-directories
        - verify-project
      taskRef:
        name: dockerfile-creation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Bundle Image (Operator Bundle) is a container image that stores
    # Kubernetes manifests and metadata associated with an operator.
    # A bundle is meant to represent a specific version of an operator on cluster.
    - name: build-bundle
      runAfter:
        - dockerfile-creation
      taskRef:
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: &bundleImage "$(params.registry)/$(params.image_namespace)/$(tasks.validate-pr-title.results.operator_name):$(tasks.validate-pr-title.results.bundle_version)"
        - name: CONTEXT
          value: "$(tasks.get-bundle-path.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: credentials
          # Do not use registry-credentials-all. Project creds may replace quay.io push creds.
          workspace: registry-credentials

    - name: make-bundle-repo-public
      runAfter:
        - build-bundle
      taskRef:
        name: set-quay-repo-visibility
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: repository
          value: "$(params.image_namespace)/$(tasks.validate-pr-title.results.operator_name)"
        - name: visibility
          value: public
        - name: oauth_secret_name
          value: "$(params.quay_oauth_secret_name)"
        - name: oauth_secret_key
          value: "$(params.quay_oauth_secret_key)"


    # Build new temporary index using IIB
    - name: add-bundle-to-index
      runAfter:
        - make-bundle-repo-public
      taskRef:
        name: add-bundle-to-index
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_images
          value: "$(tasks.get-supported-versions.results.max_supported_index)"
        - name: bundle_pullspec
          value: *bundleImage
        - name: environment
          value: "$(params.env)"
        - name: kerberos_keytab_secret_name
          value: "$(params.kerberos_keytab_secret_name)"
        - name: kerberos_keytab_secret_key
          value: "$(params.kerberos_keytab_secret_key)"
        - name: index-image-destination
          value: &tempIndexRepo "$(params.registry)/$(params.image_namespace)/$(tasks.validate-pr-title.results.operator_name)-index"
        - name: index-image-destination-tag-suffix
          value: "-$(params.git_commit)"
        - name: iib_url
          value: "$(tasks.set-env.results.iib_url)"
      workspaces:
        - name: credentials
          workspace: registry-credentials
        - name: results
          workspace: results

    - name: make-index-repo-public
      runAfter:
        - add-bundle-to-index
      taskRef:
        name: set-quay-repo-visibility
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: repository
          value: "$(params.image_namespace)/$(tasks.validate-pr-title.results.operator_name)-index"
        - name: visibility
          value: public
        - name: oauth_secret_name
          value: "$(params.quay_oauth_secret_name)"
        - name: oauth_secret_key
          value: "$(params.quay_oauth_secret_key)"

    # Try to retrieve preflight tests results
    # (they can run on premise)
    - name: get-ci-results-attempt
      runAfter:
        - make-bundle-repo-public
        - make-index-repo-public
        - content-hash
      taskRef:
        name: get-ci-results-attempt
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.validate-pr-title.results.bundle_version)"
        - name: operator_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: results
          workspace: results
          subPath: results

    - name: preflight-trigger
      runAfter:
        - get-ci-results-attempt
      taskRef:
        kind: Task
        name: preflight-trigger
      params:
        - name: preflight_trigger_environment
          value: "$(params.preflight_trigger_environment)"
        - name: ocp_version
          value: "$(tasks.get-supported-versions.results.max_supported_ocp_version)"
        - name: asset_type
          value: operator
        - name: bundle_index_image
          value: >-
            $(params.registry)/$(params.image_namespace)/$(tasks.validate-pr-title.results.operator_name)-index:v$(tasks.get-supported-versions.results.max_supported_ocp_version)-$(params.git_commit)
        - name: bundle_image
          value: >-
            $(params.registry)/$(params.image_namespace)/$(tasks.validate-pr-title.results.operator_name):$(tasks.validate-pr-title.results.bundle_version)
        - name: gpg_decryption_key_secret_name
          value: "$(params.preflight_decryption_key_secret_name)"
        - name: gpg_decryption_private_key_secret_key
          value: "$(params.preflight_decryption_private_key_secret_key)"
        - name: gpg_decryption_public_key_secret_key
          value: "$(params.preflight_decryption_public_key_secret_key)"
        - name: prow_kubeconfig_secret_name
          value: "$(params.prow_kubeconfig_secret_name)"
        - name: prow_kubeconfig_secret_key
          value: "$(params.prow_kubeconfig_secret_key)"
        - name: skip
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: credentials
          workspace: registry-credentials-all
        - name: output
          subPath: preflight-trigger
          workspace: repository

    - name: upload-artifacts
      runAfter:
        - preflight-trigger
      taskRef:
        name: upload-artifacts
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
        - name: log_file
          value: "$(tasks.preflight-trigger.results.log_output_file)"
        - name: artifacts_dir
          value: "$(tasks.preflight-trigger.results.artifacts_output_dir)"
        - name: result_file
          value: "$(tasks.preflight-trigger.results.result_output_file)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.validate-pr-title.results.bundle_version)"
        - name: package_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: connect_url
          value: "$(tasks.set-env.results.connect_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: preflight-trigger

    - name: get-ci-results
      runAfter:
        - upload-artifacts
      taskRef:
        name: get-ci-results
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
        - name: preflight_results
          value: "$(tasks.get-ci-results-attempt.results.preflight_results)"
        - name: test_result_id
          value: "$(tasks.get-ci-results-attempt.results.test_result_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.validate-pr-title.results.bundle_version)"
        - name: operator_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: results
          workspace: results
          subPath: results

    # Verify the CI results
    - name: verify-ci-results
      runAfter:
        - get-ci-results
      taskRef:
        name: verify-ci-results
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: preflight_results
          value: "$(tasks.get-ci-results.results.preflight_results)"
        - name: preflight_min_version
          value: $(params.preflight_min_version)
        - name: ci_min_version
          value: $(params.ci_min_version)
      workspaces:
        - name: results
          workspace: results
          subPath: results

    # link pull request details to test results
    - name: link-pull-request-with-open-status
      runAfter:
        - get-ci-results
      taskRef:
        name: link-pull-request
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: test_result_id
          value: "$(tasks.get-ci-results.results.test_result_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
        - name: pull_request_url
          value: "$(params.git_pr_url)"
        - name: pull_request_status
          value: "open"

    # Query Hydra API for status of the pre-certification checklist
    - name: query-publishing-checklist
      runAfter:
        - link-pull-request-with-open-status
        - verify-ci-results
      taskRef:
        name: query-publishing-checklist
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: connect_url
          value: "$(tasks.set-env.results.connect_url)"
        - name: hydra_secret_name
          value: "$(params.hydra_secret_name)"
        - name: hydra_secret_sso_client_id_key
          value: "$(params.hydra_secret_sso_client_id_key)"
        - name: hydra_secret_sso_client_secret_key
          value: "$(params.hydra_secret_sso_client_secret_key)"
        - name: hydra_sso_token_url
          value: "$(params.hydra_sso_token_url)"
        - name: ignore_publishing_checklist
          value: "$(params.ignore_publishing_checklist)"

    # merge PR
    - name: merge-pr
      runAfter:
        - query-publishing-checklist
      taskRef:
        name: merge-pr
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_pr_url
          value: $(params.git_pr_url)
        - name: bundle_path
          value: "$(tasks.get-bundle-path.results.bundle_path)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # link pull request details to test results
    - name: link-pull-request-with-merged-status
      runAfter:
        - merge-pr
      when:
        - input: $(tasks.merge-pr.results.pr_merged)
          operator: in
          values: ["true"]
      taskRef:
        name: link-pull-request
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: test_result_id
          value: "$(tasks.get-ci-results.results.test_result_id)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
        - name: pull_request_url
          value: "$(params.git_pr_url)"
        - name: pull_request_status
          value: "merged"

  finally:

    # Upload the logs of this pipeline.
    # Dependencies on other task results should be minimized. If any
    # of those tasks fail, it'll prevent this task from executing.
    - name: upload-pipeline-logs
      taskRef:
        name: upload-pipeline-logs
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.validate-pr-title.results.bundle_version)"
        - name: git_pr_url
          value: $(params.git_pr_url)
        - name: package_name
          value: "$(tasks.validate-pr-title.results.operator_name)"
        - name: pyxis_url
          value: "$(tasks.set-env.results.pyxis_url)"
        - name: pipeline_name
          value: "$(context.pipeline.name)"
        - name: pipelinerun_name
          value: "$(context.pipelineRun.name)"
        - name: pyxis_ssl_secret_name
          value: "$(params.pyxis_ssl_secret_name)"
        - name: pyxis_ssl_cert_secret_key
          value: "$(params.pyxis_ssl_cert_secret_key)"
        - name: pyxis_ssl_key_secret_key
          value: "$(params.pyxis_ssl_key_secret_key)"
      workspaces:
        - name: source
          workspace: repository

    # In the event of a failure, comment with the support link on the github PR
    - name: github-add-support-comment
      when:
        - input: $(tasks.status)
          operator: notin
          values: ["Succeeded", "Completed"]
      taskRef:
        name: github-add-comment
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: REQUEST_URL
          value: "$(params.git_pr_url)"
        - name: COMMENT
          value: "There were some errors in your Operator bundle. You can use [this support case]($(tasks.create-support-link-for-pr.results.comment)) to contact the Red Hat certification team for review."
        - name: GITHUB_TOKEN_SECRET_NAME
          value: "$(params.github_token_secret_name)"
        - name: GITHUB_TOKEN_SECRET_KEY
          value: "$(params.github_token_secret_key)"

    # Add the connect page URL in github PR comment to view the test results/logs
    - name: github-add-connect-url-comment
      taskRef:
        name: github-add-comment
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: REQUEST_URL
          value: "$(params.git_pr_url)"
        - name: COMMENT
          value: "[View your certification test results and logs here]($(tasks.set-env.results.connect_url)/projects/$(tasks.certification-project-check.results.certification_project_id)/test-results)."
        - name: GITHUB_TOKEN_SECRET_NAME
          value: "$(params.github_token_secret_name)"
        - name: GITHUB_TOKEN_SECRET_KEY
          value: "$(params.github_token_secret_key)"

    - name: set-github-passed-label
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/passed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-failed-label
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/failed"
        - name: remove-matching-namespace-labels
          value: "true"

    # Set the github status to success if the pipeline passed
    - name: set-github-status-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Successfully certified the Operator bundle."
        - name: state
          value: success
        - name: context
          value: "operator/test"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Set the github status to failure if the pipeline didn't pass.
    - name: set-github-status-failure
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Failed to certify the Operator bundle."
        - name: state
          value: failure
        - name: context
          value: "operator/test"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: comment_suffix
          value: |

            ## Troubleshooting

            Please refer to the [troubleshooting guide](https://github.com/redhat-openshift-ecosystem/certification-releases/blob/main/4.9/ga/troubleshooting.md).
      workspaces:
        - name: output
          workspace: results
          subPath: summary

    # Submit a pipeline metrics to a collector
    - name: update-metrics
      taskRef:
        name: update-metrics
      params:
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: metrics_url
          value: "$(params.metrics_endpoint)"
      workspaces:
        - name: output
          workspace: results
          subPath: metrics
