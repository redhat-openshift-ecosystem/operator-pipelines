---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: community-hosted-pipeline
spec:
  params:
    - name: git_repo_url
    - name: git_pr_branch
    - name: git_fork_url
    - name: git_pr_url
    - name: git_pr_title
    - name: git_username
    - name: git_commit
    - name: git_commit_base
    - name: env

    - name: registry
      description: Must be some variety of quay registry.
      default: quay.io

    - name: image_namespace
      default: "$(context.pipelineRun.namespace)"
      description: The namespace/organization all built images will be pushed to.

    - name: pipeline_image
      default: "quay.io/redhat-isv/operator-pipelines-images:released"

    - name: github_token_secret_name
      description: The name of the Kubernetes Secret that contains the GitHub token.
      default: github-bot-token

    - name: github_token_secret_key
      description: The key within the Kubernetes Secret that contains the GitHub token.
      default: github_bot_token

    - name: kerberos_keytab_secret_name
      description: >-
        The name of the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: kerberos-keytab

    - name: kerberos_keytab_secret_key
      description: >-
        The key within the Kubernetes Secret that contains the kerberos keytab for submitting IIB builds.
      default: krb5-community-pending.keytab
    - name: quay_oauth_secret_name
      default: community-quay-oauth-token

    - name: quay_oauth_secret_key
      default: token

    - name: preflight_trigger_environment
      description: Which openshift-ci step-registry steps and ProwJob templates to use. Can be one of [preprod, prod]
      default: "prod"

    - name: prow_kubeconfig_secret_name
      description: The name of the Kubernetes Secret that contains the prow kubeconfig for preflight tests.
      default: prow-kubeconfig

    - name: prow_kubeconfig_secret_key
      description: The key within the Kubernetes Secret that contains the prow kubeconfig for preflight tests.
      default: kubeconfig

    - name: preflight_decryption_key_secret_name
      description: The name of the Kubernetes Secret that contains the gpg decryption key.
      default: preflight-decryption-key

    - name: preflight_decryption_private_key_secret_key
      description: The key within the Kubernetes Secret that contains the gpg private key.
      default: private

    - name: preflight_decryption_public_key_secret_key
      description: The key within the Kubernetes Secret that contains the gpg public key.
      default: public

    - name: metrics_endpoint
      description: Prometheus metrics endpoint
      default: http://pipeline-metrics.pipeline-metrics-prod

  workspaces:
    - name: repository
    - name: results
    - name: ssh-dir
      optional: true
    - name: registry-credentials
  tasks:

    # extract the PR number from the PR URL
    - name: get-pr-number
      taskRef:
        name: get-pr-number
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_pr_url
          value: "$(params.git_pr_url)"

    # acquire/lease the resource to resolve the conflict of concurrent pipelineruns
    - name: acquire-lease
      runAfter:
        - get-pr-number
      taskRef:
        name: acquire-lease
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: &leaseName "community-hosted-pipeline-pr-$(tasks.get-pr-number.results.git_pr_number)"

    # Set a initial PR label with indication that pipeline has started
    - name: set-github-started-label
      runAfter:
        - acquire-lease
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/started"
        - name: remove-matching-namespace-labels
          value: "true"

    # set environment
    - name: set-env-community
      runAfter:
        - set-github-started-label
      taskRef:
        name: set-env-community
        kind: Task
      params:
        - name: env
          value: $(params.env)

    # Clone the repository contents from the PR branch
    - name: clone-repository
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-env-community
      params:
        - name: url
          value: "$(params.git_fork_url)"
        - name: revision
          value: "$(params.git_commit)"
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    # Clone the repository contents from the base branch
    - name: clone-repository-base
      taskRef:
        name: git-clone
        kind: Task
      runAfter:
        - set-env-community
      params:
        - name: url
          value: "$(params.git_repo_url)"
        - name: revision
          value: "$(params.git_commit_base)"
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:bc551c776fb3d0fcc6cfd6d8dc9f0030de012cb9516fac42b1da75e6771001d9
      workspaces:
        - name: output
          workspace: repository
          subPath: base
        - name: ssh-directory
          workspace: ssh-dir

    - name: detect-changes
      taskRef:
        name: parse-repo-changes
        kind: Task
      runAfter:
        - clone-repository
        - clone-repository-base
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: head_commit
          value: "$(params.git_commit)"
        - name: base_commit
          value: "$(params.git_commit_base)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: pr
          workspace: repository
          subPath: src
        - name: base
          workspace: repository
          subPath: base

    # parse ci.yaml file and look for the reviewer and or author of the PR
    - name: get-ci-reviewer
      taskRef:
        name: get-ci-reviewer
        kind: Task
      runAfter:
        - detect-changes
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_username
          value: "$(params.git_username)"
        - name: pr_url
          value: "$(params.git_pr_url)"
        - name: operator_name
          value: "$(tasks.detect-changes.results.added_operator)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: base
          workspace: repository
          subPath: base

    - name: read-config
      taskRef:
        name: read-config
        kind: Task
      runAfter:
        - get-ci-reviewer
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: operator_path
          value: "$(tasks.detect-changes.results.operator_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: get-supported-versions
      runAfter:
        - read-config
      taskRef:
        name: get-supported-versions
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: static-tests
      taskRef:
        name: run-static-tests
        kind: Task
      runAfter:
        - get-supported-versions
      when:
        - input: "$(tasks.detect-changes.results.added_bundle)"
          operator: notin
          values: [""]
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: operator_name
          value: "$(tasks.detect-changes.results.added_operator)"
        - name: bundle_version
          value: "$(tasks.detect-changes.results.added_bundle)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: output
          workspace: results
          subPath: summary

    - name: static-tests-results
      taskRef:
        name: report-static-tests-results
        kind: Task
      runAfter:
        - static-tests
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: messages_count
          value: "$(tasks.static-tests.results.messages_count)"
        - name: failures_count
          value: "$(tasks.static-tests.results.failures_count)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: output
          workspace: results
          subPath: summary

    - name: dockerfile-creation
      runAfter:
        - static-tests-results
      taskRef:
        name: dockerfile-creation
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Bundle Image (Operator Bundle) is a container image that stores
    # Kubernetes manifests and metadata associated with an operator.
    # A bundle is meant to represent a specific version of an operator on cluster.
    - name: build-bundle
      runAfter:
        - dockerfile-creation
      taskRef:
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: &bundleImage "$(params.registry)/$(params.image_namespace)/$(tasks.detect-changes.results.added_operator):$(tasks.detect-changes.results.added_bundle)-$(params.git_commit)"
        - name: CONTEXT
          value: "$(tasks.detect-changes.results.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src
        - name: credentials
          workspace: registry-credentials

    - name: make-bundle-repo-public
      runAfter:
        - build-bundle
      taskRef:
        name: set-quay-repo-visibility
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: repository
          value: "$(params.image_namespace)/$(tasks.detect-changes.results.added_operator)"
        - name: visibility
          value: public
        - name: oauth_secret_name
          value: "$(params.quay_oauth_secret_name)"
        - name: oauth_secret_key
          value: "$(params.quay_oauth_secret_key)"

    - name: add-bundle-to-index
      runAfter:
        - make-bundle-repo-public
      taskRef:
        name: add-bundle-to-index
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: index_images
          value: "$(tasks.get-supported-versions.results.max_supported_index)"
        - name: bundle_pullspec
          value: *bundleImage
        - name: environment
          value: "$(params.env)"
        - name: kerberos_keytab_secret_name
          value: "$(params.kerberos_keytab_secret_name)"
        - name: kerberos_keytab_secret_key
          value: "$(params.kerberos_keytab_secret_key)"
        - name: index-image-destination
          value: &tempIndexRepo "$(params.registry)/$(params.image_namespace)/catalog"
        # Adding a commit hash as a suffix to the image tag
        - name: index-image-destination-tag-suffix
          value: "-$(params.git_commit)"
        - name: upgrade-graph-mode
          value: "$(tasks.read-config.results.upgrade-graph-mode)"
        - name: iib_url
          value: "$(tasks.set-env-community.results.iib_url)"
      workspaces:
        - name: credentials
          workspace: registry-credentials
        - name: results
          workspace: results

    - name: make-index-repo-public
      runAfter:
        - add-bundle-to-index
      taskRef:
        name: set-quay-repo-visibility
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: repository
          value: "$(params.image_namespace)/catalog"
        - name: visibility
          value: public
        - name: oauth_secret_name
          value: "$(params.quay_oauth_secret_name)"
        - name: oauth_secret_key
          value: "$(params.quay_oauth_secret_key)"

    - name: preflight-trigger
      runAfter:
        - make-index-repo-public
      taskRef:
        kind: Task
        name: preflight-trigger
      params:
        - name: preflight_trigger_environment
          value: "$(params.preflight_trigger_environment)"
        - name: ocp_version
          value: "$(tasks.get-supported-versions.results.max_supported_ocp_version)"
        - name: asset_type
          value: operator
        - name: bundle_index_image
          value: >-
            $(params.registry)/$(params.image_namespace)/catalog:v$(tasks.get-supported-versions.results.max_supported_ocp_version)-$(params.git_commit)
        - name: bundle_image
          value: *bundleImage
        - name: gpg_decryption_key_secret_name
          value: "$(params.preflight_decryption_key_secret_name)"
        - name: gpg_decryption_private_key_secret_key
          value: "$(params.preflight_decryption_private_key_secret_key)"
        - name: gpg_decryption_public_key_secret_key
          value: "$(params.preflight_decryption_public_key_secret_key)"
        - name: prow_kubeconfig_secret_name
          value: "$(params.prow_kubeconfig_secret_name)"
        - name: prow_kubeconfig_secret_key
          value: "$(params.prow_kubeconfig_secret_key)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
      workspaces:
        - name: credentials
          workspace: registry-credentials
        - name: output
          subPath: preflight-trigger
          workspace: results

    - name: evaluate-preflight-result
      runAfter:
        - preflight-trigger
      taskRef:
        kind: Task
        name: evaluate-preflight-result
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: preflight_result_file_path
          value: "$(tasks.preflight-trigger.results.result_output_file)"
        - name: preflight_log_file_path
          value: "$(tasks.preflight-trigger.results.log_output_file)"
        - name: preflight_artifacts_output_dir
          value: "$(tasks.preflight-trigger.results.artifacts_output_dir)"
      workspaces:
        - name: input
          subPath: preflight-trigger
          workspace: results

    # merge PR
    - name: merge-pr
      when:
        - input: "$(tasks.get-ci-reviewer.results.author_is_reviewer)"
          operator: in
          values: ["true"]
      runAfter:
        - evaluate-preflight-result
      taskRef:
        name: merge-pr
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_pr_url
          value: $(params.git_pr_url)
        - name: bundle_path
          value: "$(tasks.detect-changes.results.bundle_path)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: force_merge
          value: "true"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

  finally:

    - name: set-github-passed-label
      when:
        - input: "$(tasks.status)"
          operator: in
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/passed"
        - name: remove-matching-namespace-labels
          value: "true"

    - name: set-github-failed-label
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: github-labels
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: add_labels
          value: "$(context.pipeline.name)/failed"
        - name: remove-matching-namespace-labels
          value: "true"

    # set the GitHub status to success if the pipeline passes
    - name: set-github-status-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded", "Completed"]
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Pipeline for the operator tests has passed successfully"
        - name: state
          value: success
        - name: context
          value: "operator/test"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # set the GitHub status to failure if the pipeline does not pass
    - name: set-github-status-failure
      when:
        - input: "$(tasks.status)"
          operator: notin
          values:
            - Succeeded
            - Completed
      taskRef:
        name: set-github-status
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: git_repo_url
          value: $(params.git_repo_url)
        - name: commit_sha
          value: $(params.git_commit)
        - name: description
          value: "Pipeline for the operator tests has failed"
        - name: state
          value: failure
        - name: context
          value: "operator/test"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"

    # Comment with a pipeline summary
    - name: github-add-summary-comment
      taskRef:
        name: github-pipelinerun-summary
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: request_url
          value: "$(params.git_pr_url)"
        - name: github_token_secret_name
          value: "$(params.github_token_secret_name)"
        - name: github_token_secret_key
          value: "$(params.github_token_secret_key)"
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: upload_pipeline_logs
          value: "true"
      workspaces:
        - name: output
          workspace: results
          subPath: summary

    # Release the acquired resource
    - name: release-lease
      taskRef:
        name: release-lease
      params:
        - name: pipeline_image
          value: "$(params.pipeline_image)"
        - name: lease-name
          value: *leaseName

    # Submit a pipeline metrics to a collector
    - name: update-metrics
      taskRef:
        name: update-metrics
      params:
        - name: pipelinerun
          value: "$(context.pipelineRun.name)"
        - name: metrics_url
          value: "$(params.metrics_endpoint)"
      workspaces:
        - name: output
          workspace: results
          subPath: metrics
