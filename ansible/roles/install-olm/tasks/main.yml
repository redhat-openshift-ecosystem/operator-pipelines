---
# TODO: correct task order and fix conditions including installation one
- name: "Uninstall OLM"
  ansible.builtin.command: "{{ op_bin_dir }}/{{ operator_sdk_binary }} olm uninstall --version {{ olm_version }} --timeout 5m0s"
  changed_when: true
  failed_when: false
  register: olm_uninstall_rc
  tags:
    - clean

- name: "Detect if OLM is present"
  block:
    - name: "Set OLM needed default"
      ansible.builtin.set_fact:
        olm_needed: true

    - name: "OLM detection"
      ansible.builtin.include_tasks:
        file: detect_olm.yml

    - name: "Remove OLM"
      ansible.builtin.command: "{{ op_bin_dir }}/{{ operator_sdk_binary }} olm uninstall --timeout {{ olm_installation_timeout }}"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: olm_removed
      failed_when: false
      when:
        - olm_is_running is defined
        - olm_is_running | bool
        - olm_needed | bool

    - name: "Report"
      block:
        - name: "Prepare message for final report"
          ansible.builtin.set_fact:
            olm_report: "Unable to uninstall OLM {{ olm_version_detected }} which is blocking installation of OLM {{ olm_version }}"
            olm_needed: false

        - name: "Add message to final report"
          ansible.builtin.set_fact:
            community_final_report: "{{ community_final_report | default([]) + [olm_report] }}"
      when:
        - olm_removed.rc is defined
        - olm_removed.rc != 0

    - name: "Installing OLM ({{ olm_version }})"
      ansible.builtin.command: "{{ op_bin_dir }}/{{ operator_sdk_binary }} olm install --version {{ olm_version }} --timeout {{ olm_installation_timeout }}"
      register: olm_install_output
      when:
        - olm_needed | bool
  tags:
    - install
