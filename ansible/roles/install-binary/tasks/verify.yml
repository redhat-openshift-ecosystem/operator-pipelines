---
- name: "Verify binary '{{ package_binary }}'"
  block:
    - name: "Check '{{ package_binary }}' version"
      ansible.builtin.command: "{{ op_bin_dir }}/{{ package_binary }} {{ package_version_command }}"
      register: package_version_result
      changed_when: false
      failed_when: false

    - name: "Resets 'binary_needs_install' and 'binary_current_version'"
      ansible.builtin.set_fact:
        binary_needs_install: false
        binary_current_version: ""
        std_lines: "{{ package_version_result.stdout_lines | union(package_version_result.stderr_lines) }}"

    - name: "Resets 'binary_current_version'"
      ansible.builtin.set_fact:
        binary_current_version: "{{ std_lines[0].split(package_parse_delimeter)[package_parse_index] | default('') }}"
      when: std_lines.0 is defined

    - name: "Sets 'binary_current_version'"
      ansible.builtin.set_fact:
        binary_needs_install: true
      when: package_version_result.rc is undefined or not package_version_result.rc in package_version_rcs or binary_current_version != package_version

    - name: "Print package info message"
      ansible.builtin.debug:
        msg: "{{ package_binary }} current={{ binary_current_version }} request={{ package_version }} ok={{ not binary_needs_install | bool }}"
      when: package_verify_msg is undefined or package_verify_msg | bool

  tags:
    - prerequisites
    - install
    - verify
