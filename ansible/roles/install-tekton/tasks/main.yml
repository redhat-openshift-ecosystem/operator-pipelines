---
- name: "Download tekton k8s files"
  block:
    - name: "Download tekton pipeline '{{ tekton_pipeline_version }}' to {{ kind_tekton_pipeline_path }}"
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/tekton-releases/pipeline/previous/{{ tekton_pipeline_version }}/release.yaml"
        dest: "{{ kind_tekton_pipeline_path }}"
        force: true
        mode: "0664"
        validate_certs: "{{ tekton_validate_certs }}"

    - name: "Download tekton triggers '{{ tekton_triggers_version }}' to {{ kind_tekton_triggers_path }}"
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/tekton-releases/triggers/previous/{{ tekton_triggers_version }}/release.yaml"
        dest: "{{ kind_tekton_triggers_path }}"
        force: true
        mode: "0664"
        validate_certs: "{{ tekton_validate_certs }}"

    - name: "Download tekton dashboard '{{ tekton_dashboard_version }}' to '{{ kind_tekton_dashboard_path }}'"
      ansible.builtin.get_url:
        url: "https://github.com/tektoncd/dashboard/releases/download/{{ tekton_dashboard_version }}/tekton-dashboard-release.yaml"
        dest: "{{ kind_tekton_dashboard_path }}"
        force: true
        mode: "0664"
        validate_certs: "{{ tekton_validate_certs }}"
  tags:
    - clean
    - install

- name: "Remove tekton"
  block:
    - name: "Remove tekton dashboard {{ tekton_dashboard_version }}"
      kubernetes.core.k8s:
        state: absent
        src: "{{ kind_tekton_dashboard_path }}"
        wait: true
        wait_sleep: 1
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: "Remove tekton triggers {{ tekton_triggers_version }}"
      kubernetes.core.k8s:
        state: absent
        src: "{{ kind_tekton_triggers_path }}"
        wait: true
        wait_sleep: 1
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: "Remove tekton pipeline {{ tekton_pipeline_version }}"
      kubernetes.core.k8s:
        state: absent
        src: "{{ kind_tekton_pipeline_path }}"
        wait: true
        wait_sleep: 1
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: "Remove tekton pipeline feature-flags"
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: feature-flags
            namespace: tekton-pipelines
        kubeconfig: "{{ kubeconfig }}"

    - name: "Remove tekton pipeline resolvers-feature-flags"
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: resolvers-feature-flags
            namespace: tekton-pipelines-resolvers
        kubeconfig: "{{ kubeconfig }}"

  tags:
    - clean
    - install

- name: "Install tekton"
  block:
    - name: "Install tekton pipeline {{ tekton_pipeline_version }}"
      kubernetes.core.k8s:
        state: present
        src: "{{ kind_tekton_pipeline_path }}"
        wait: true
        wait_sleep: 1
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: "Update configMap 'feature-flags' in namespace 'openshift-pipelines'"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: feature-flags
            namespace: tekton-pipelines
          data:
            running-in-environment-with-injected-sidecars: "true"
            disable-home-env-overwrite: "true"
            disable-working-directory-overwrite: "true"
            scope-when-expressions-to-task: "true"
            require-git-ssh-secret-known-hosts: "false"
            enable-tekton-oci-bundles: "true"
            enable-api-fields: stable
            enable-custom-tasks: "false"
            disable-creds-init: "false"
            disable-affinity-assistant: "true"

    - name: "Update configMap 'resolvers-feature-flags' in namespace 'openshift-pipelines-resolvers'"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: resolvers-feature-flags
            namespace: tekton-pipelines-resolvers
            labels:
              app.kubernetes.io/component: resolvers
              app.kubernetes.io/instance: default
              app.kubernetes.io/part-of: tekton-pipelines
          data:
            # Setting this flag to "true" enables remote resolution of Tekton OCI bundles.
            enable-bundles-resolver: "true"
            # Setting this flag to "true" enables remote resolution of tasks and pipelines via the Tekton Hub.
            enable-hub-resolver: "true"
            # Setting this flag to "true" enables remote resolution of tasks and pipelines from Git repositories.
            enable-git-resolver: "true"
            # Setting this flag to "true" enables remote resolution of tasks and pipelines from other namespaces within the cluster.
            enable-cluster-resolver: "true"

    - name: "Install tekton triggers {{ tekton_triggers_version }}"
      kubernetes.core.k8s:
        state: present
        src: "{{ kind_tekton_triggers_path }}"
        wait: true
        wait_sleep: 1
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: "Install tekton dashboard {{ tekton_dashboard_version }}"
      kubernetes.core.k8s:
        state: present
        src: "{{ kind_tekton_dashboard_path }}"
        wait: true
        wait_sleep: 1
        wait_timeout: 360
        kubeconfig: "{{ kubeconfig }}"

    - name: "Enable Ingress and tekton-dashboard 'http://tekton-dashboard.127.0.0.1.nip.io:{{ tekton_dashboard_public_port }}'"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: tekton-dashboard
            namespace: tekton-pipelines
          spec:
            rules:
              - host: tekton-dashboard.127.0.0.1.nip.io
                http:
                  paths:
                    - pathType: ImplementationSpecific
                      backend:
                        service:
                          name: tekton-dashboard
                          port:
                            number: 9097

    - name: "Adding 'Tekton Dashboard local url' to 'community_final_report'"
      ansible.builtin.set_fact:
        community_final_report: >
          "{{ (community_final_report | default([])) + ['Tekton Dashboard local url : http://tekton-dashboard.127.0.0.1.nip.io:' + tekton_dashboard_public_port | string] }}"

    - name: "Setup ngrok"
      block:
        - name: "Start ngrok at port 8000"
          ansible.builtin.shell:
            cmd: "nohup ngrok http {{ tekton_dashboard_public_port }} --authtoken={{ ngrok_auth_token }} --log=stdout </dev/null >/dev/null 2>&1 &"
            chdir: "/tmp/"
          async: 10
          poll: 0
          changed_when: false

        - name: "Getting ngrok public url"
          ansible.builtin.uri:
            url: "http://localhost:4040/api/tunnels"
            return_content: true
            status_code: 200
          register: ngrok_result

        - name: "Print ngrok output"
          ansible.builtin.debug:
            msg: "Dashboard: {{ ngrok_result.json.tunnels[0].public_url }}"
          when: ngrok_result.json.tunnels.0 is defined

        - name: "Adding 'Tekton Dashboard local url' to 'community_final_report'"
          ansible.builtin.set_fact:
            community_final_report: "{{ (community_final_report | default([])) + ['Tekton Dashboard public url : ' + ngrok_result.json.tunnels[0].public_url] }}"
          when: ngrok_result.json.tunnels.0 is defined

      when:
        - ngrok_auth_token is defined
        - ngrok_auth_token | length > 0
  tags:
    - install
