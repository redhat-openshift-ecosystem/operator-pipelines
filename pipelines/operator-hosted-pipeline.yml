---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator-hosted-pipeline
spec:
  params:
    - name: git_pr_branch
    - name: git_pr_title
    - name: git_pr_url
    - name: git_repo_url
    - name: git_username
    - name: pyxis_url
    - name: bundle_path
    - name: preflight_min_version
    - name: ci_min_version
    - name: registry
      default: quay.io
    - name: image_stream
      default: $(context.pipelineRun.namespace)
  workspaces:
    - name: repository
    - name: results
    - name: registry-credentials
  tasks:
    # Git clone
    - name: checkout
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_pr_branch)
      workspaces:
        - name: output
          workspace: repository
          subPath: src

    # Validate submission
    - name: submission-validation
      runAfter:
        - checkout
      taskRef:
        name: submission-validation
      params:
        - name: git_username
          value: $(params.git_username)
        - name: git_pr_title
          value: $(params.git_pr_title)
        - name: pyxis_url
          value: $(params.pyxis_url)
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # reserve operator name
    - name: reserve-operator-name
      runAfter:
        - submission-validation
      taskRef:
        name: reserve-operator-name
      params:
        - name: operator_name
          value: "$(tasks.submission-validation.results.operator_name)"

    # additional checks
    - name: operator-validation
      runAfter:
        - reserve-operator-name
      taskRef:
        name: operator-validation
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: yaml-lint
      runAfter:
        - reserve-operator-name
      taskRef:
        name: yaml-lint
      params:
        - name: args
          value: ["-d {extends: default, rules: {line-length: {max: 180, level: warning}, indentation: {indent-sequences: whatever}}}", "$(params.bundle_path)"]
      workspaces:
        - name: shared-workspace
          workspace: repository
          subPath: src

    - name: digest-pinning
      runAfter:
        - reserve-operator-name
      taskRef:
        name: digest-pinning
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: verify-pinned-digest
      runAfter:
        - digest-pinning
      taskRef:
        name: verify-pinned-digest
      params:
        - name: dirty_flag
          value: "$(tasks.digest-pinning.results.dirty_flag)"

    - name: content-hash
      runAfter:
        - reserve-operator-name
      taskRef:
        name: content-hash
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: verify-changed-directories
      runAfter:
        - reserve-operator-name
      taskRef:
        name: verify-changed-directories
      params:
        - name: operator_name
          value: "$(tasks.submission-validation.results.operator_name)"
        - name: operator_version
          value: "$(tasks.submission-validation.results.operator_version)"
        - name: git_pr_branch
          value: $(params.git_pr_branch)

    - name: query-publishing-checklist
      runAfter:
        - reserve-operator-name
      taskRef:
        name: query-publishing-checklist
      params:
        - name: cert_project_id
          value: "$(tasks.submission-validation.results.cert_project_id)"

    # Build images- bundle and index and push them to registry.
    # Those steps are also a part of the CI pipeline.
    - name: dockerfile-creation
      runAfter:
        - operator-validation
        - yaml-lint
        - verify-pinned-digest
        - content-hash
        - verify-changed-directories
        - query-publishing-checklist
      taskRef:
        name: dockerfile-creation
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Bundle Image (Operator Bundle) is a container image that stores
    # Kubernetes manifests and metadata associated with an operator.
    # A bundle is meant to represent a specific version of an operator on cluster.
    - name: build-bundle
      runAfter:
        - dockerfile-creation
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: &bundleImage "$(params.registry)/$(params.image_stream)/$(tasks.operator-validation.results.package_name):$(tasks.operator-validation.results.bundle_version)"
        - name: CONTEXT
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Index image contains a record of bundle images from which
    # manifests could be extract in order to install an operator.
    - name: generate-index
      runAfter:
        - build-bundle
      taskRef:
        name: generate-index
      params:
        - name: bundle_image
          value: *bundleImage
        - name: from_index
          value: "$(tasks.operator-validation.results.max_supported_index)"
      workspaces:
        - name: output
          workspace: repository
          subPath: index
        - name: credentials
          workspace: registry-credentials

    - name: build-index
      runAfter:
        - generate-index
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: &bundleIndexImage "$(params.registry)/$(params.image_stream)/$(tasks.operator-validation.results.package_name)-index:$(tasks.operator-validation.results.bundle_version)"
        - name: CONTEXT
          value: "$(params.bundle_path)"
        # - name: DOCKERFILE
        #   value: "Dockerfile.index"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    # Try to retrieve preflight tests results
    # (they can run on premise)
    - name: get-ci-results-attempt
      runAfter:
        - operator-validation
        - yaml-lint
        - verify-pinned-digest
        - content-hash
        - verify-changed-directories
        - query-publishing-checklist
      taskRef:
        name: get-ci-results-attempt
      params:
        - name: pyxis_url
          value: $(params.pyxis_url)
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.submission-validation.results.cert_project_id)"
        - name: operator_version
          value: "$(tasks.submission-validation.results.operator_version)"
      workspaces:
        - name: results
          workspace: results
          subPath: results

    # If we didn't got the CI pipeline preflight test results
    # run preflight here
    # and try to retrieve them again
    - name: ocp-environment-preparation
      runAfter:
        - get-ci-results-attempt
        - build-index
      taskRef:
        name: ocp-environment-preparation
      params:
        - name: index_image
          value: *bundleIndexImage
        - name: package_name
          value: "$(tasks.operator-validation.results.package_name)"
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: preflight
      runAfter:
        - ocp-environment-preparation
      taskRef:
        name: preflight
      params:
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: upload-artifacts
      runAfter:
        - preflight
      taskRef:
        name: upload-artifacts
      params:
        - name: pyxis_api_key
          value: foo
        - name: log_file
          value: "$(tasks.preflight.results.log_output_file)"
        - name: result_file
          value: "$(tasks.preflight.results.result_output_file)"
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: ocp-environment-cleanup
      runAfter:
        - upload-artifacts
      taskRef:
        name: ocp-environment-cleanup
      params:
        - name: index_image
          value: *bundleIndexImage
        - name: package_name
          value: "$(tasks.operator-validation.results.package_name)"
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
      workspaces:
        - name: source
          workspace: repository
          subPath: src

    - name: get-ci-results
      runAfter:
        - upload-artifacts
      taskRef:
        name: get-ci-results
      params:
        - name: preflight_results_exists
          value: "$(tasks.get-ci-results-attempt.results.preflight_results_exists)"
        - name: pyxis_url
          value: $(params.pyxis_url)
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.submission-validation.results.cert_project_id)"
        - name: operator_version
          value: "$(tasks.submission-validation.results.operator_version)"
      workspaces:
        - name: results
          workspace: results
          subPath: results

    # Verify the CI results
    - name: verify-ci-results
      runAfter:
        - get-ci-results
      taskRef:
        name: verify-ci-results
      params:
        - name: preflight_min_version
          value: $(params.preflight_min_version)
        - name: ci_min_version
          value: $(params.ci_min_version)
      workspaces:
        - name: results
          workspace: results
          subPath: results

    # merge PR
    - name: merge-pr
      runAfter:
        - verify-ci-results
      taskRef:
        name: merge-pr
      params:
        - name: git_pr_url
          value: $(params.git_pr_url)
      workspaces:
        - name: source
          workspace: repository
          subPath: src

  # Finally- clean up
  finally:
    - name: cleanup
      taskRef:
        name: cleanup
