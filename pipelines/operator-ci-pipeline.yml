---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: operator-ci-pipeline
spec:
  params:
    - name: git_repo_url
    - name: git_revision
    - name: bundle_path
    - name: registry
      default: image-registry.openshift-image-registry.svc:5000
    - name: pyxis_url
      default: https://catalog.redhat.com/api/containers/
    - name: image_namespace
      default: $(context.pipelineRun.namespace)
      description: The namespace/organization all built images will be pushed to.
    - name: test_mode
      description: The test mode flag skips certain steps to make a pipeline
        faster for rapid operator development. The flag needs to be set to false
        for a full CI pipeline run and certification pull-request submission.
      default: "false"
  workspaces:
    - name: pipeline
    - name: ssh-dir
    - name: registry-credentials
      optional: true
  tasks:
    - name: checkout
      taskRef:
        name: git-clone
        kind: Task
      params:
        - name: url
          value: $(params.git_repo_url)
        - name: revision
          value: $(params.git_revision)
      workspaces:
        - name: output
          workspace: pipeline
          subPath: src
        - name: ssh-directory
          workspace: ssh-dir

    - name: digest-pinning
      runAfter:
        - checkout
      taskRef:
        name: digest-pinning
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
        - name: skip
          value: "$(params.test_mode)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: commit-pinned-digest
      runAfter:
        - digest-pinning
      taskRef:
        name: commit-pinned-digest
      params:
        - name: dirty_flag
          value: "$(tasks.digest-pinning.results.dirty_flag)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: yaml-lint
      runAfter:
        - commit-pinned-digest
      taskRef:
        name: yaml-lint
      params:
        - name: args
          value: ["-d {extends: default, rules: {line-length: {max: 180, level: warning}, indentation: {indent-sequences: whatever}}}", "$(params.bundle_path)"]
      workspaces:
        - name: shared-workspace
          workspace: pipeline
          subPath: src

    - name: operator-validation
      runAfter:
        - commit-pinned-digest
      taskRef:
        name: operator-validation
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
        - name: pyxis_url
          value: "$(params.pyxis_url)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: certification-project-check
      runAfter:
        - commit-pinned-digest
      taskRef:
        name: certification-project-check
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: content-hash
      runAfter:
        - operator-validation
        - yaml-lint
        - certification-project-check
      taskRef:
        name: content-hash
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: dockerfile-creation
      runAfter:
        - operator-validation
        - yaml-lint
        - certification-project-check
      taskRef:
        name: dockerfile-creation
      params:
        - name: bundle_path
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    # Bundle Image (Operator Bundle) is a container image that stores
    # Kubernetes manifests and metadata associated with an operator.
    # A bundle is meant to represent a specific version of an operator on cluster.
    - name: build-bundle
      runAfter:
        - dockerfile-creation
      taskRef:
        # custom task that supports auth
        # TODO: try push auth changes to upstream
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: &bundleImage "$(params.registry)/$(params.image_namespace)/$(tasks.operator-validation.results.package_name):$(tasks.operator-validation.results.bundle_version)"
        - name: CONTEXT
          value: "$(params.bundle_path)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src
        - name: credentials
          workspace: registry-credentials

    # Index image contains a record of bundle images from which
    # manifests could be extract in order to install an operator.
    - name: generate-index
      runAfter:
        - build-bundle
      taskRef:
        name: generate-index
      params:
        - name: bundle_image
          value: *bundleImage
        - name: from_index
          value: "$(tasks.operator-validation.results.max_supported_index)"
      workspaces:
        - name: output
          workspace: pipeline
          subPath: index
        - name: credentials
          workspace: registry-credentials

    - name: build-index
      runAfter:
        - generate-index
      taskRef:
        name: buildah
        kind: Task
      params:
        - name: IMAGE
          value: &bundleIndexImage "$(params.registry)/$(params.image_namespace)/$(tasks.operator-validation.results.package_name)-index:$(tasks.operator-validation.results.bundle_version)"
        - name: DOCKERFILE
          value: "$(tasks.generate-index.results.index_dockerfile)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: index
        - name: credentials
          workspace: registry-credentials

    - name: ocp-environment-preparation
      runAfter:
        - build-index
      taskRef:
        name: ocp-environment-preparation
      params:
        - name: index_image
          value: *bundleIndexImage
        - name: package_name
          value: "$(tasks.operator-validation.results.package_name)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: preflight
      runAfter:
        - ocp-environment-preparation
      taskRef:
        name: preflight
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: upload-artifacts
      runAfter:
        - content-hash
        - preflight
      taskRef:
        name: upload-artifacts
      params:
        - name: log_file
          value: "$(tasks.preflight.results.log_output_file)"
        - name: artifacts_dir
          value: "$(tasks.preflight.results.artifacts_output_dir)"
        - name: result_file
          value: "$(tasks.preflight.results.result_output_file)"
        - name: md5sum
          value: "$(tasks.content-hash.results.md5sum)"
        - name: cert_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
        - name: bundle_version
          value: "$(tasks.operator-validation.results.bundle_version)"
        - name: package_name
          value: "$(tasks.operator-validation.results.package_name)"
        - name: pyxis_url
          value: "$(params.pyxis_url)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: ocp-environment-cleanup
      runAfter:
        - preflight
      taskRef:
        name: ocp-environment-cleanup
      params:
        - name: index_image
          value: *bundleIndexImage
        - name: package_name
          value: "$(tasks.operator-validation.results.package_name)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src

    - name: open-pr
      runAfter:
        - upload-artifacts
        - ocp-environment-cleanup
      taskRef:
        name: open-pull-request
      params:
        - name: log_url
          value: "$(tasks.upload-artifacts.results.log_url)"
        - name: result_url
          value: "$(tasks.upload-artifacts.results.result_url)"
        - name: package_name
          value: "$(tasks.operator-validation.results.package_name)"
        - name: bundle_version
          value: "$(tasks.operator-validation.results.bundle_version)"
        - name: certification_project_id
          value: "$(tasks.certification-project-check.results.certification_project_id)"
      workspaces:
        - name: source
          workspace: pipeline
          subPath: src
