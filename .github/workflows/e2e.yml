---
name: E2E-CI
###
# To read more about the E2E workflow, see docs/ci-cd.md
###

on:  # yamllint disable-line rule:truthy
  workflow_run:
    workflows:
      - Build
    branches:
      - main
    types:
      - completed
  workflow_dispatch:

jobs:

  # envs  for other jobs are prepared as outputs of this task. Outputs are a good way to
  # concatenate strings and use them as values to keywords other than "run".
  # For run, they can be used with keyword "env".
  prepare-env-job:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prepare.outputs.version }}
      pr_title: ${{ steps.prepare.outputs.pr_title }}
      oc_project: ${{ steps.prepare.outputs.oc_project }}
      test_pr_base_branch: ${{ steps.prepare.outputs.test_pr_base_branch }}
    steps:
      - id: prepare
        run: |
          echo "::set-output name=version::0.0.${{ github.run_number }}-${{ github.run_attempt }}"
          echo "::set-output name=pr_title::operator test-e2e-operator (0.0.${{ github.run_number }}-${{ github.run_attempt }})"
          echo "::set-output name=oc_project::test-e2e-${{ github.run_number }}-${{ github.run_attempt }}"
          echo "::set-output name=test_pr_base_branch::0.0.${{ github.run_number }}-${{ github.run_attempt }}-base"


  # Create a Pull Request with the fake version of fake operator in the repository operator-pipelines-test.
  # Pipelines will run against this PR.
  prepare-test-data:
    runs-on: ubuntu-latest
    needs: prepare-env-job
    env:
      VERSION: ${{needs.prepare-env-job.outputs.version}}
      PR_BASE_BRANCH: ${{needs.prepare-env-job.outputs.test_pr_base_branch}}
    outputs:
      test_pr_number: ${{ steps.create_pull_request.outputs.pull-request-number }}
      test_pr_head_sha: ${{ steps.create_pull_request.outputs.pull-request-head-sha }}
    steps:
      # Clone repository operator-pipelines-test on branch e2e-test-operator
      - uses: actions/checkout@v2
        with:
          repository: 'redhat-openshift-ecosystem/operator-pipelines-test'
          token: ${{ secrets.BOT_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name 'rh-operator-bundle-test-e2e'
          git config user.email 'exd-guild-isv+operators-test-e2e@redhat.com'
          git fetch

      - name: Create test PR base branch
        run: |
          git branch -c main ${PR_BASE_BRANCH}
          git push --set-upstream origin ${PR_BASE_BRANCH}

      # Create commit with changes used for E2E tests. This commit contains the `test-e2e-operator`
      # from branch e2e-test-operator- just with the new version.
      - name: Create commit to create PR with test data (PR head branch)
        run: |
          # Start from the branch e2e-test-operator. This branch contains the base test operator.
          # If something would go wrong with the test branch, backup is on branch e2e-test-operator-backup
          git checkout e2e-test-operator

          pushd operators/test-e2e-operator

          # Modify the test operator version
          cp -avr 0.0.8 $VERSION
          find $VERSION/ -type f -exec sed -i "s/0\.0\.8/$VERSION/g" {} \;
          diff -bur 0.0.8/ $VERSION/ || true
          rm -rv ./0.0.8


          popd

          cp -r operators/test-e2e-operator /tmp

          # Start the feature branch (head) from main
          git checkout main
          cp -r /tmp/test-e2e-operator operators/

          # Head branch of the PR will be created by create-pull-request action
          git add operators && git commit -m "new version of operator"

      # Create PR.
      - id: create_pull_request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          author: 'rh-operator-bundle-test-e2e <exd-guild-isv+operators-test-e2e@redhat.com>'
          commit-message: 'Preparing the data for E2E tests'
          base: ${{needs.prepare-env-job.outputs.test_pr_base_branch}}
          branch: ${{needs.prepare-env-job.outputs.version}}
          title: ${{needs.prepare-env-job.outputs.pr_title}}
          delete-branch: true
          body: 'This is PR used for E2E tests of the operator pipelines'

  # Deploy and run the E2E tests
  run-e2e:
    runs-on: ubuntu-latest
    needs:
      - prepare-env-job
      - prepare-test-data
    env:
      VERSION: ${{needs.prepare-env-job.outputs.version}}
      OC_PROJECT: ${{needs.prepare-env-job.outputs.oc_project}}
    steps:
      # Clone repo
      - uses: actions/checkout@v1

      - name: Prepare environment
        run: |
          # Install dependencies
          pip install --user openshift

          # Install tkn cli
          curl -LO https://github.com/tektoncd/cli/releases/download/v0.21.0/tkn_0.21.0_Linux_x86_64.tar.gz
          tar xvzf tkn_0.21.0_Linux_x86_64.tar.gz -C /usr/local/bin/

          # Prepare Kubeconfig.
          # Use GitHub secret which contains the Kubeconfig for SA with admin privilleges (same as in ansible vault)
          # to create Kubernetes context.
          mkdir $HOME/.kube
          cat <<EOF > $HOME/.kube/config
          ${{ secrets.KUBECONFIG }}
          EOF

          # Prepare vault password
          echo ${{ secrets.VAULT_PASSWORD }} > ansible/vault-password

      - name: Deploy e2e environment
        # Default timeout is 2 min
        timeout-minutes: 5
        run: |
          oc new-project $OC_PROJECT
          pushd ansible
          bash -x init-custom-env.sh $OC_PROJECT integration-tests vault-password ${{ github.sha }} $VERSION
          popd

      - name: Run CI pipeline
        run: |
          # Change submit=true after ISV-1503
          tkn pipeline start operator-ci-pipeline \
            --use-param-defaults \
            --param git_repo_url=git@github.com:redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param upstream_repo_name=redhat-openshift-ecosystem/operator-pipelines-test \
            --param git_branch=$VERSION \
            --param bundle_path=operators/test-e2e-operator/$VERSION \
            --param env=stage \
            --param submit=false \
            --param pipeline_image=quay.io/redhat-isv/operator-pipelines-images:${{ github.sha }} \
            --workspace name=pipeline,volumeClaimTemplateFile=templates/workspace-template.yml \
            --workspace name=kubeconfig,secret=kubeconfig \
            --workspace name=ssh-dir,secret=github-ssh-credentials \
            --showlog

      - name: Check if CI pipeline passed
        run: |
          PIPELINERUN_NAME=$(oc get pr -l tekton.dev/pipeline=operator-ci-pipeline --no-headers -o custom-columns=":metadata.name")
          PIPELINERUN_SUCCEEDED=$(oc get pr $PIPELINERUN_NAME -o jsonpath={'.status.conditions[].status'})
          if [[ "$PIPELINERUN_SUCCEEDED" != "True" ]]; then
            oc get pr
            exit 1
          fi

      - name: Run Hosted pipeline
        run: |
          tkn pipeline start operator-hosted-pipeline \
            --use-param-defaults \
            --param git_pr_branch=$VERSION \
            --param image_namespace=operator-pipeline-stage \
            --param git_pr_title="${{needs.prepare-env-job.outputs.pr_title}}" \
            --param git_pr_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test/pull/${{needs.prepare-test-data.outputs.test_pr_number}} \
            --param git_fork_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param git_repo_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param git_username=rh-operator-bundle-bot \
            --param git_commit=${{needs.prepare-test-data.outputs.test_pr_head_sha}} \
            --param git_base_branch=${{needs.prepare-env-job.outputs.test_pr_base_branch}} \
            --param pr_head_label=$VERSION \
            --param env=stage \
            --param preflight_min_version=0.0.0 \
            --param ci_min_version=0.0.0 \
            --param pipeline_image=quay.io/redhat-isv/operator-pipelines-images:${{ github.sha }} \
            --param metrics_endpoint=http://pipeline-metrics.pipeline-metrics-nonprod \
            --workspace name=repository,volumeClaimTemplateFile=templates/workspace-template-small.yml \
            --workspace name=results,volumeClaimTemplateFile=templates/workspace-template.yml \
            --workspace name=registry-credentials-all,volumeClaimTemplateFile=templates/workspace-template-small.yml \
            --workspace name=registry-credentials,secret=hosted-pipeline-registry-auth-secret \
            --showlog

      - name: Check if Hosted pipeline passed
        run: |
          PIPELINERUN_NAME=$(oc get pr --no-headers -l tekton.dev/pipeline=operator-hosted-pipeline -o custom-columns=":metadata.name")
          PIPELINERUN_SUCCEEDED=$(oc get pr $PIPELINERUN_NAME -o jsonpath={'.status.conditions[].status'})
          if [[ "$PIPELINERUN_SUCCEEDED" != "True" ]]; then
            oc get pr
            exit 1
          fi

      - name: Run Release pipeline
        run: |
          tkn pipeline start operator-release-pipeline \
            --use-param-defaults \
            --param src_image_namespace=operator-pipeline-stage \
            --param dest_image_namespace=redhat-isv-operators-stage \
            --param git_repo_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test.git \
            --param git_commit=${{needs.prepare-test-data.outputs.test_pr_head_sha}} \
            --param git_pr_title="${{needs.prepare-env-job.outputs.pr_title}}" \
            --param git_base_branch=${{needs.prepare-env-job.outputs.test_pr_base_branch}} \
            --param git_pr_url=https://github.com/redhat-openshift-ecosystem/operator-pipelines-test/pull/${{needs.prepare-test-data.outputs.test_pr_number}} \
            --param is_latest=true \
            --param env=stage \
            --param pipeline_image=quay.io/redhat-isv/operator-pipelines-images:${{ github.sha }} \
            --param metrics_endpoint=http://pipeline-metrics.pipeline-metrics-nonprod \
            --workspace name=repository,volumeClaimTemplateFile=templates/workspace-template-small.yml \
            --workspace name=results,volumeClaimTemplateFile=templates/workspace-template.yml \
            --workspace name=image-data,volumeClaimTemplateFile=templates/workspace-template-small.yml \
            --workspace name=registry-pull-credentials,secret=release-pipeline-registry-auth-pull-secret \
            --workspace name=registry-push-credentials,secret=release-pipeline-registry-auth-push-secret \
            --showlog

      - name: Check if Release pipeline passed
        run: |
          PIPELINERUN_NAME=$(oc get pr --no-headers -l tekton.dev/pipeline=operator-release-pipeline -o custom-columns=":metadata.name")
          PIPELINERUN_SUCCEEDED=$(oc get pr $PIPELINERUN_NAME -o jsonpath={'.status.conditions[].status'})
          if [[ "$PIPELINERUN_SUCCEEDED" != "True" ]]; then
            oc get pr
            exit 1
          fi

  cleanup:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - run-e2e
      - prepare-env-job
      - prepare-test-data
    env:
      OC_PROJECT: ${{needs.prepare-env-job.outputs.oc_project}}
    steps:
      - name: Clean OC project
        if: always()
        run: |

          echo $OC_PROJECT

          # Prepare Kubeconfig.
          # Use GitHub secret which contains the Kubeconfig for SA with admin privilleges (same as in ansible vault)
          # to create Kubernetes context.
          mkdir $HOME/.kube
          cat <<EOF > $HOME/.kube/config
          ${{ secrets.KUBECONFIG }}
          EOF

          oc delete project $OC_PROJECT

      # Deleting the branches associated with the PR will also close the PR- if it still exists
      - name: Clean test branches
        if: always()
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          owner: redhat-openshift-ecosystem
          repository: operator-pipelines-test
          branches: ${{needs.prepare-env-job.outputs.test_pr_base_branch}},${{needs.prepare-env-job.outputs.version}}
          soft_fail: true
